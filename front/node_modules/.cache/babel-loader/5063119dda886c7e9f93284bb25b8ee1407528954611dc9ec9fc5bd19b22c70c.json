{"ast":null,"code":"export const Utils = () => {\n  // This function handles getting images from the specified website url\n  function readDirectory(path) {\n    // read the contents of the directory\n    fs.readdir(path, (err, files) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      // loop through all files in the directory\n      files.forEach(file => {\n        const filePath = `${path}/${file}`;\n\n        // check if the file is a directory\n        fs.stat(filePath, (err, stat) => {\n          if (err) {\n            console.error(err);\n            return;\n          }\n          if (stat.isDirectory()) {\n            // if the file is a directory, recursively call this function on it\n            readDirectory(filePath);\n          } else {\n            // if the file is not a directory, read its contents and print them to the console\n            fs.readFile(filePath, \"utf8\", (err, data) => {\n              if (err) {\n                console.error(err);\n                return;\n              }\n              console.log(`Contents of ${filePath}:`);\n              console.log(data);\n            });\n          }\n        });\n      });\n    });\n  }\n  return {\n    readDirectory\n  };\n};\n_c = Utils;\nvar _c;\n$RefreshReg$(_c, \"Utils\");","map":{"version":3,"names":["Utils","readDirectory","path","fs","readdir","err","files","console","error","forEach","file","filePath","stat","isDirectory","readFile","data","log","_c","$RefreshReg$"],"sources":["/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/front/src/utils/utils.js"],"sourcesContent":["export const Utils = () => {\n  // This function handles getting images from the specified website url\n  function readDirectory(path) {\n    // read the contents of the directory\n    fs.readdir(path, (err, files) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      // loop through all files in the directory\n      files.forEach((file) => {\n        const filePath = `${path}/${file}`;\n\n        // check if the file is a directory\n        fs.stat(filePath, (err, stat) => {\n          if (err) {\n            console.error(err);\n            return;\n          }\n\n          if (stat.isDirectory()) {\n            // if the file is a directory, recursively call this function on it\n            readDirectory(filePath);\n          } else {\n            // if the file is not a directory, read its contents and print them to the console\n            fs.readFile(filePath, \"utf8\", (err, data) => {\n              if (err) {\n                console.error(err);\n                return;\n              }\n\n              console.log(`Contents of ${filePath}:`);\n              console.log(data);\n            });\n          }\n        });\n      });\n    });\n  }\n\n  return {\n    readDirectory,\n  };\n};\n"],"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAGA,CAAA,KAAM;EACzB;EACA,SAASC,aAAaA,CAACC,IAAI,EAAE;IAC3B;IACAC,EAAE,CAACC,OAAO,CAACF,IAAI,EAAE,CAACG,GAAG,EAAEC,KAAK,KAAK;MAC/B,IAAID,GAAG,EAAE;QACPE,OAAO,CAACC,KAAK,CAACH,GAAG,CAAC;QAClB;MACF;;MAEA;MACAC,KAAK,CAACG,OAAO,CAAEC,IAAI,IAAK;QACtB,MAAMC,QAAQ,GAAI,GAAET,IAAK,IAAGQ,IAAK,EAAC;;QAElC;QACAP,EAAE,CAACS,IAAI,CAACD,QAAQ,EAAE,CAACN,GAAG,EAAEO,IAAI,KAAK;UAC/B,IAAIP,GAAG,EAAE;YACPE,OAAO,CAACC,KAAK,CAACH,GAAG,CAAC;YAClB;UACF;UAEA,IAAIO,IAAI,CAACC,WAAW,EAAE,EAAE;YACtB;YACAZ,aAAa,CAACU,QAAQ,CAAC;UACzB,CAAC,MAAM;YACL;YACAR,EAAE,CAACW,QAAQ,CAACH,QAAQ,EAAE,MAAM,EAAE,CAACN,GAAG,EAAEU,IAAI,KAAK;cAC3C,IAAIV,GAAG,EAAE;gBACPE,OAAO,CAACC,KAAK,CAACH,GAAG,CAAC;gBAClB;cACF;cAEAE,OAAO,CAACS,GAAG,CAAE,eAAcL,QAAS,GAAE,CAAC;cACvCJ,OAAO,CAACS,GAAG,CAACD,IAAI,CAAC;YACnB,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,OAAO;IACLd;EACF,CAAC;AACH,CAAC;AAACgB,EAAA,GA5CWjB,KAAK;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}