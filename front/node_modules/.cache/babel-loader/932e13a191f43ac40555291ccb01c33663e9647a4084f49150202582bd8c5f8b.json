{"ast":null,"code":"var _jsxFileName = \"/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/src/components/Parser.js\";\nimport { stopWords, text } from \"./stopWords.js\";\nimport { franc, francAll } from \"franc\";\n\n// const { NlpManager } = require(\"node-nlp\");\nimport natural from \"natural\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst winkPosTagger = require(\"wink-pos-tagger\");\nconst tokenizer = new natural.WordTokenizer();\nconst stemmer = natural.PorterStemmerFr;\nconst Parser = () => {\n  function countWords(text) {\n    const tagger = new winkPosTagger({\n      language: \"french\"\n    });\n    const results = {};\n    const tokens = tokenizer.tokenize(text);\n    const language = franc(\"bonjour monsieur comment allez vous\");\n    console.log(language);\n    if (language === \"fra\") {\n      //   const tagger = new natural.BrillPOSTagger(\n      //     new natural.Lexicon(\"french\"),\n      //     new natural.BrillPOSTaggerTrainer(\"french\")\n      //   );\n      const taggedWords = tagger.tag(tokens);\n      console.log(taggedWords);\n      const isVerb = taggedWords.some(word => {\n        word[1].startsWith(\"V\");\n      });\n      console.log(isVerb);\n    } else {\n      console.log(\"Le mot n'est pas en français.\");\n    }\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      const stem = stemmer.stem(token.toLowerCase());\n      if (!stopWords.includes(stem)) {\n        results[stem] = (results[stem] || 0) + 1;\n      }\n    }\n    return results;\n  }\n\n  // const text = \"Le chat et le chien sont amis, mais le chat préfère le tapis\";\n  const wordCounts = countWords(text);\n  //   console.log(wordCounts);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), \"Paragraphe :\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_c = Parser;\nexport default Parser;\nvar _c;\n$RefreshReg$(_c, \"Parser\");","map":{"version":3,"names":["stopWords","text","franc","francAll","natural","jsxDEV","_jsxDEV","winkPosTagger","require","tokenizer","WordTokenizer","stemmer","PorterStemmerFr","Parser","countWords","tagger","language","results","tokens","tokenize","console","log","taggedWords","tag","isVerb","some","word","startsWith","i","length","token","stem","toLowerCase","includes","wordCounts","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/src/components/Parser.js"],"sourcesContent":["import { stopWords, text } from \"./stopWords.js\";\nimport { franc, francAll } from \"franc\";\n\n// const { NlpManager } = require(\"node-nlp\");\nimport natural from \"natural\";\nconst winkPosTagger = require(\"wink-pos-tagger\");\n\nconst tokenizer = new natural.WordTokenizer();\nconst stemmer = natural.PorterStemmerFr;\n\nconst Parser = () => {\n  function countWords(text) {\n    const tagger = new winkPosTagger({ language: \"french\" });\n\n    const results = {};\n    const tokens = tokenizer.tokenize(text);\n\n    const language = franc(\"bonjour monsieur comment allez vous\");\n    console.log(language);\n    if (language === \"fra\") {\n      //   const tagger = new natural.BrillPOSTagger(\n      //     new natural.Lexicon(\"french\"),\n      //     new natural.BrillPOSTaggerTrainer(\"french\")\n      //   );\n      const taggedWords = tagger.tag(tokens);\n      console.log(taggedWords);\n      const isVerb = taggedWords.some((word) => {\n        word[1].startsWith(\"V\");\n      });\n      console.log(isVerb);\n    } else {\n      console.log(\"Le mot n'est pas en français.\");\n    }\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      const stem = stemmer.stem(token.toLowerCase());\n      if (!stopWords.includes(stem)) {\n        results[stem] = (results[stem] || 0) + 1;\n      }\n    }\n    return results;\n  }\n\n  // const text = \"Le chat et le chien sont amis, mais le chat préfère le tapis\";\n  const wordCounts = countWords(text);\n  //   console.log(wordCounts);\n\n  return (\n    <div>\n      <h2>\n        <br></br>\n        Paragraphe :<br></br>\n        <br></br>\n        {text}\n      </h2>\n    </div>\n  );\n};\n\nexport default Parser;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,IAAI,QAAQ,gBAAgB;AAChD,SAASC,KAAK,EAAEC,QAAQ,QAAQ,OAAO;;AAEvC;AACA,OAAOC,OAAO,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC9B,MAAMC,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAEhD,MAAMC,SAAS,GAAG,IAAIL,OAAO,CAACM,aAAa,EAAE;AAC7C,MAAMC,OAAO,GAAGP,OAAO,CAACQ,eAAe;AAEvC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB,SAASC,UAAUA,CAACb,IAAI,EAAE;IACxB,MAAMc,MAAM,GAAG,IAAIR,aAAa,CAAC;MAAES,QAAQ,EAAE;IAAS,CAAC,CAAC;IAExD,MAAMC,OAAO,GAAG,CAAC,CAAC;IAClB,MAAMC,MAAM,GAAGT,SAAS,CAACU,QAAQ,CAAClB,IAAI,CAAC;IAEvC,MAAMe,QAAQ,GAAGd,KAAK,CAAC,qCAAqC,CAAC;IAC7DkB,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;IACrB,IAAIA,QAAQ,KAAK,KAAK,EAAE;MACtB;MACA;MACA;MACA;MACA,MAAMM,WAAW,GAAGP,MAAM,CAACQ,GAAG,CAACL,MAAM,CAAC;MACtCE,OAAO,CAACC,GAAG,CAACC,WAAW,CAAC;MACxB,MAAME,MAAM,GAAGF,WAAW,CAACG,IAAI,CAAEC,IAAI,IAAK;QACxCA,IAAI,CAAC,CAAC,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC;MACzB,CAAC,CAAC;MACFP,OAAO,CAACC,GAAG,CAACG,MAAM,CAAC;IACrB,CAAC,MAAM;MACLJ,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC9C;IAEA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,MAAM,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,MAAME,KAAK,GAAGZ,MAAM,CAACU,CAAC,CAAC;MACvB,MAAMG,IAAI,GAAGpB,OAAO,CAACoB,IAAI,CAACD,KAAK,CAACE,WAAW,EAAE,CAAC;MAC9C,IAAI,CAAChC,SAAS,CAACiC,QAAQ,CAACF,IAAI,CAAC,EAAE;QAC7Bd,OAAO,CAACc,IAAI,CAAC,GAAG,CAACd,OAAO,CAACc,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MAC1C;IACF;IACA,OAAOd,OAAO;EAChB;;EAEA;EACA,MAAMiB,UAAU,GAAGpB,UAAU,CAACb,IAAI,CAAC;EACnC;;EAEA,oBACEK,OAAA;IAAA6B,QAAA,eACE7B,OAAA;MAAA6B,QAAA,gBACE7B,OAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,gBACG,eAAAjC,OAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eACrBjC,OAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,EACRtC,IAAI;IAAA;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEV,CAAC;AAACC,EAAA,GAhDI3B,MAAM;AAkDZ,eAAeA,MAAM;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}