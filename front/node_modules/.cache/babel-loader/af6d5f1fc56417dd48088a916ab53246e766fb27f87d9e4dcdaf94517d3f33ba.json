{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst TranslateZh = require('./translate-zh');\nconst dictionary = require('./dictionary');\nclass StemmerZh {\n  constructor(container) {\n    this.container = container;\n    this.name = 'stemmer-zh';\n    this.translate = new TranslateZh();\n    this.dictionary = dictionary;\n  }\n  definitionContains(arr, text) {\n    return arr.filter(x => x.definition.includes(text)).length > 0;\n  }\n  parseDefinition(definitions) {\n    if (this.definitionContains(definitions, '(possessive particle)')) {\n      return undefined;\n    }\n    if (this.definitionContains(definitions, '(modal particle')) {\n      return undefined;\n    }\n    if (definitions.length === 0) {\n      return undefined;\n    }\n    const firstDefinition = definitions[0].definition;\n    if (firstDefinition.includes('you (')) {\n      return 'ni3';\n    }\n    let pinyin = dictionary.getPinyin(definitions[0].simplified);\n    if (Array.isArray(pinyin)) {\n      pinyin = pinyin.join(' ');\n    }\n    return pinyin;\n  }\n  translateToEnglish(token) {\n    const definitions = dictionary.search(token);\n    if (!definitions || definitions.length === 0) {\n      return token;\n    }\n    return this.parseDefinition(definitions);\n  }\n  clearText(text) {\n    text = text.replace('？', ' ');\n    text = text.replace('！', ' ');\n    return text.replace(new RegExp('.:+-=()\"\\'!?،,؛;。，？！￥：；《》【】（）', 'g'), ' ');\n  }\n  getSegments(text) {\n    const presegments = dictionary.segment(text);\n    const result = [];\n    let chars = '';\n    for (let i = 0; i < presegments.length; i += 1) {\n      const segment = presegments[i];\n      if (this.translate.isChineseChar(segment)) {\n        if (chars) {\n          result.push(chars);\n          chars = '';\n        }\n        result.push(segment);\n      } else {\n        chars += segment;\n      }\n    }\n    if (chars) {\n      result.push(chars);\n    }\n    return result;\n  }\n  processText(text) {\n    text = this.clearText(text);\n    const result = [];\n    const segments = this.getSegments(text);\n    for (let i = 0; i < segments.length; i += 1) {\n      const translated = this.translateToEnglish(segments[i]);\n      if (translated) {\n        result.push(translated);\n      }\n    }\n    return this.clearText(result.join(' ')).toLowerCase().split(' ').filter(x => x);\n  }\n  async stem(text, input) {\n    const inputText = typeof text === 'string' ? text : input.utterance || input.text;\n    return this.processText(inputText);\n  }\n  async run(srcInput) {\n    const input = srcInput;\n    const locale = input.locale || 'en';\n    const stemmer = this.container.get(`stemmer-${locale}`) || this;\n    input.tokens = await stemmer.stem(input.text || input.tokens.join(' '), input);\n    return input;\n  }\n}\nmodule.exports = StemmerZh;","map":{"version":3,"names":["TranslateZh","require","dictionary","StemmerZh","constructor","container","name","translate","definitionContains","arr","text","filter","x","definition","includes","length","parseDefinition","definitions","undefined","firstDefinition","pinyin","getPinyin","simplified","Array","isArray","join","translateToEnglish","token","search","clearText","replace","RegExp","getSegments","presegments","segment","result","chars","i","isChineseChar","push","processText","segments","translated","toLowerCase","split","stem","input","inputText","utterance","run","srcInput","locale","stemmer","get","tokens","module","exports"],"sources":["/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/node_modules/@nlpjs/lang-zh/src/stemmer-zh.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst TranslateZh = require('./translate-zh');\nconst dictionary = require('./dictionary');\n\nclass StemmerZh {\n  constructor(container) {\n    this.container = container;\n    this.name = 'stemmer-zh';\n    this.translate = new TranslateZh();\n    this.dictionary = dictionary;\n  }\n\n  definitionContains(arr, text) {\n    return arr.filter((x) => x.definition.includes(text)).length > 0;\n  }\n\n  parseDefinition(definitions) {\n    if (this.definitionContains(definitions, '(possessive particle)')) {\n      return undefined;\n    }\n    if (this.definitionContains(definitions, '(modal particle')) {\n      return undefined;\n    }\n    if (definitions.length === 0) {\n      return undefined;\n    }\n    const firstDefinition = definitions[0].definition;\n    if (firstDefinition.includes('you (')) {\n      return 'ni3';\n    }\n    let pinyin = dictionary.getPinyin(definitions[0].simplified);\n    if (Array.isArray(pinyin)) {\n      pinyin = pinyin.join(' ');\n    }\n    return pinyin;\n  }\n\n  translateToEnglish(token) {\n    const definitions = dictionary.search(token);\n    if (!definitions || definitions.length === 0) {\n      return token;\n    }\n    return this.parseDefinition(definitions);\n  }\n\n  clearText(text) {\n    text = text.replace('？', ' ');\n    text = text.replace('！', ' ');\n    return text.replace(\n      new RegExp('.:+-=()\"\\'!?،,؛;。，？！￥：；《》【】（）', 'g'),\n      ' '\n    );\n  }\n\n  getSegments(text) {\n    const presegments = dictionary.segment(text);\n    const result = [];\n    let chars = '';\n    for (let i = 0; i < presegments.length; i += 1) {\n      const segment = presegments[i];\n      if (this.translate.isChineseChar(segment)) {\n        if (chars) {\n          result.push(chars);\n          chars = '';\n        }\n        result.push(segment);\n      } else {\n        chars += segment;\n      }\n    }\n    if (chars) {\n      result.push(chars);\n    }\n    return result;\n  }\n\n  processText(text) {\n    text = this.clearText(text);\n    const result = [];\n    const segments = this.getSegments(text);\n    for (let i = 0; i < segments.length; i += 1) {\n      const translated = this.translateToEnglish(segments[i]);\n      if (translated) {\n        result.push(translated);\n      }\n    }\n    return this.clearText(result.join(' '))\n      .toLowerCase()\n      .split(' ')\n      .filter((x) => x);\n  }\n\n  async stem(text, input) {\n    const inputText =\n      typeof text === 'string' ? text : input.utterance || input.text;\n    return this.processText(inputText);\n  }\n\n  async run(srcInput) {\n    const input = srcInput;\n    const locale = input.locale || 'en';\n    const stemmer = this.container.get(`stemmer-${locale}`) || this;\n    input.tokens = await stemmer.stem(\n      input.text || input.tokens.join(' '),\n      input\n    );\n    return input;\n  }\n}\n\nmodule.exports = StemmerZh;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}