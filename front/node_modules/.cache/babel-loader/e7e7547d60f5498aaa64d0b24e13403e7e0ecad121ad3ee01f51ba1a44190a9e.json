{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  Clonable,\n  containerBootstrap\n} = require('@nlpjs/core');\nconst {\n  NluManager,\n  NluNeural\n} = require('@nlpjs/nlu');\nconst {\n  Ner,\n  ExtractorEnum,\n  ExtractorRegex,\n  ExtractorTrim,\n  ExtractorBuiltin\n} = require('@nlpjs/ner');\nconst {\n  ActionManager,\n  NlgManager\n} = require('@nlpjs/nlg');\nconst {\n  SentimentAnalyzer\n} = require('@nlpjs/sentiment');\nconst {\n  SlotManager\n} = require('@nlpjs/slot');\nconst ContextManager = require('./context-manager');\nclass Nlp extends Clonable {\n  constructor() {\n    let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let container = arguments.length > 1 ? arguments[1] : undefined;\n    super({\n      settings: {},\n      container: settings.container || container || containerBootstrap()\n    }, container);\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = `nlp`;\n    }\n    this.registerDefault();\n    this.applySettings(this.settings, this.container.getConfiguration(this.settings.tag));\n    this.nluManager = this.container.get('nlu-manager', this.settings.nlu);\n    this.ner = this.container.get('ner', this.settings.ner);\n    this.nlgManager = this.container.get('nlg-manager', this.settings.nlg);\n    this.actionManager = this.container.get('action-manager', this.settings.action);\n    this.sentiment = this.container.get('sentiment-analyzer', this.settings.sentiment);\n    this.slotManager = this.container.get('SlotManager', this.settings.slot);\n    this.contextManager = this.container.get('context-manager', this.settings.context);\n    this.forceNER = this.settings.forceNER;\n    if (this.forceNER === undefined) {\n      this.forceNER = false;\n    }\n    this.initialize();\n  }\n  registerDefault() {\n    this.container.registerConfiguration('nlp', {\n      threshold: 0.5,\n      autoLoad: true,\n      autoSave: true,\n      modelFileName: 'model.nlp',\n      executeActionsBeforeAnswers: false\n    }, false);\n    this.use(NluManager);\n    this.use(Ner);\n    this.use(ExtractorEnum);\n    this.use(ExtractorRegex);\n    this.use(ExtractorTrim);\n    this.use(ExtractorBuiltin);\n    this.use(NlgManager);\n    this.use(ActionManager);\n    this.use(NluNeural);\n    this.use(SentimentAnalyzer);\n    this.use(ContextManager);\n    this.container.register('SlotManager', SlotManager, false);\n  }\n  initialize() {\n    if (this.settings.nlu) {\n      const locales = Object.keys(this.settings.nlu);\n      for (let i = 0; i < locales.length; i += 1) {\n        const locale = locales[i];\n        const domains = Object.keys(this.settings.nlu[locale]);\n        for (let j = 0; j < domains.length; j += 1) {\n          const domain = domains[j];\n          const settings = this.settings.nlu[locale][domain];\n          const {\n            className\n          } = settings;\n          delete settings.className;\n          this.useNlu(className, locale, domain, settings);\n        }\n      }\n    }\n    if (this.settings.languages) {\n      this.addLanguage(this.settings.languages);\n    }\n    if (this.settings.locales) {\n      this.addLanguage(this.settings.locales);\n    }\n    if (this.settings.calculateSentiment === undefined) {\n      this.settings.calculateSentiment = true;\n    }\n    if (this.settings.executeActionsBeforeAnswers === undefined) {\n      this.settings.executeActionsBeforeAnswers = false;\n    }\n  }\n  async start() {\n    if (this.settings.corpora) {\n      await this.addCorpora(this.settings.corpora);\n    }\n  }\n  async loadOrTrain() {\n    let loaded = false;\n    if (this.settings.autoLoad) {\n      loaded = await this.load(this.settings.modelFileName);\n    }\n    if (!loaded) {\n      await this.train();\n    }\n  }\n  useNlu(clazz, locale, domain, settings) {\n    if (!locale) {\n      locale = '??';\n    }\n    if (Array.isArray(locale)) {\n      for (let i = 0; i < locale.length; i += 1) {\n        this.useNlu(clazz, locale[i], domain, settings);\n      }\n    } else {\n      const className = typeof clazz === 'string' ? clazz : this.container.use(clazz);\n      let config = this.container.getConfiguration(`domain-manager-${locale}`);\n      if (!config) {\n        config = {};\n        this.container.registerConfiguration(`domain-manager-${locale}`, config);\n      }\n      if (!config.nluByDomain) {\n        config.nluByDomain = {};\n      }\n      const domainName = !domain || domain === '*' ? 'default' : domain;\n      if (!config.nluByDomain[domainName]) {\n        config.nluByDomain[domainName] = {};\n      }\n      config.nluByDomain[domainName].className = className;\n      config.nluByDomain[domainName].settings = settings;\n    }\n  }\n  guessLanguage(input) {\n    return this.nluManager.guessLanguage(input);\n  }\n  addLanguage(locales) {\n    return this.nluManager.addLanguage(locales);\n  }\n  removeLanguage(locales) {\n    return this.nluManager.removeLanguage(locales);\n  }\n  addDocument(locale, utterance, intent) {\n    const entities = this.ner.getEntitiesFromUtterance(utterance);\n    this.slotManager.addBatch(intent, entities);\n    return this.nluManager.add(locale, utterance, intent);\n  }\n  removeDocument(locale, utterance, intent) {\n    return this.nluManager.remove(locale, utterance, intent);\n  }\n  getRulesByName(locale, name) {\n    return this.ner.getRulesByName(locale, name);\n  }\n  addNerRule(locale, name, type, rule) {\n    return this.ner.addRule(locale, name, type, rule);\n  }\n  removeNerRule(locale, name, rule) {\n    return this.ner.removeRule(locale, name, rule);\n  }\n  addNerRuleOptionTexts(locale, name, option, texts) {\n    return this.ner.addRuleOptionTexts(locale, name, option, texts);\n  }\n  removeNerRuleOptionTexts(locale, name, option, texts) {\n    return this.ner.removeRuleOptionTexts(locale, name, option, texts);\n  }\n  addNerRegexRule(locale, name, regex) {\n    return this.ner.addRegexRule(locale, name, regex);\n  }\n  addNerBetweenCondition(locale, name, left, right, opts) {\n    return this.ner.addBetweenCondition(locale, name, left, right, opts);\n  }\n  addNerBetweenLastCondition(locale, name, left, right, opts) {\n    return this.ner.addBetweenLastCondition(locale, name, left, right, opts);\n  }\n  addNerPositionCondition(locale, name, position, words, opts) {\n    return this.ner.addPositionCondition(locale, name, position, words, opts);\n  }\n  addNerAfterCondition(locale, name, words, opts) {\n    return this.ner.addAfterCondition(locale, name, words, opts);\n  }\n  addNerAfterFirstCondition(locale, name, words, opts) {\n    return this.ner.addAfterFirstCondition(locale, name, words, opts);\n  }\n  addNerAfterLastCondition(locale, name, words, opts) {\n    return this.ner.addAfterLastCondition(locale, name, words, opts);\n  }\n  addNerBeforeCondition(locale, name, words, opts) {\n    return this.ner.addBeforeCondition(locale, name, words, opts);\n  }\n  addNerBeforeFirstCondition(locale, name, words, opts) {\n    return this.ner.addBeforeFirstCondition(locale, name, words, opts);\n  }\n  addNerBeforeLastCondition(locale, name, words, opts) {\n    return this.ner.addBeforeLastCondition(locale, name, words, opts);\n  }\n  assignDomain(locale, intent, domain) {\n    return this.nluManager.assignDomain(locale, intent, domain);\n  }\n  getIntentDomain(locale, intent) {\n    return this.nluManager.getIntentDomain(locale, intent);\n  }\n  getDomains() {\n    return this.nluManager.getDomains();\n  }\n  addAction(intent, action, parameters, fn) {\n    return this.actionManager.addAction(intent, action, parameters, fn);\n  }\n  registerActionFunction(action, fn) {\n    return this.actionManager.registerActionInMap(action, fn);\n  }\n  getActions(intent) {\n    return this.actionManager.findActions(intent);\n  }\n  removeAction(intent, action, parameters) {\n    return this.actionManager.removeAction(intent, action, parameters);\n  }\n  removeActions(intent) {\n    return this.actionManager.removeActions(intent);\n  }\n  removeActionFunction(action) {\n    return this.actionManager.removeActionFromMap(action);\n  }\n  addAnswer(locale, intent, answer, opts) {\n    return this.nlgManager.add(locale, intent, answer, opts);\n  }\n  removeAnswer(locale, intent, answer, opts) {\n    return this.nlgManager.remove(locale, intent, answer, opts);\n  }\n  findAllAnswers(locale, intent) {\n    const response = this.nlgManager.findAllAnswers({\n      locale,\n      intent\n    });\n    return response.answers;\n  }\n  async addCorpora(names) {\n    if (names) {\n      if (Array.isArray(names)) {\n        for (let i = 0; i < names.length; i += 1) {\n          await this.addCorpus(names[i]);\n        }\n      } else {\n        await this.addCorpus(names);\n      }\n    }\n  }\n  async addImported(input) {\n    let content;\n    if (input.content) {\n      content = input.content;\n    } else if (input.filename) {\n      const fs = this.container.get('fs');\n      content = await fs.readFile(input.filename);\n      if (!content) {\n        throw new Error(`Corpus not found \"${input.filename}\"`);\n      }\n    } else {\n      throw new Error('Corpus information without content or file name');\n    }\n    let importer = this.container.get(input.importer);\n    if (!importer) {\n      importer = this.container.get(`${input.importer}-importer`);\n    }\n    if (!importer) {\n      throw new Error(`Corpus importer not found: ${input.importer}`);\n    }\n    const corpora = importer.transform(content, input);\n    for (let i = 0; i < corpora.length; i += 1) {\n      this.addCorpus(corpora[i]);\n    }\n  }\n  addEntities(entities, locale) {\n    const keys = Object.keys(entities);\n    for (let i = 0; i < keys.length; i += 1) {\n      const entityName = keys[i];\n      let entity = entities[entityName];\n      if (typeof entity === 'string') {\n        entity = {\n          regex: [entity]\n        };\n      }\n      let finalLocale = entity.locale;\n      if (!finalLocale) {\n        finalLocale = locale || 'en';\n      }\n      if (typeof finalLocale === 'string') {\n        finalLocale = finalLocale.slice(0, 2);\n      }\n      if (entity.options) {\n        const optionNames = Object.keys(entity.options);\n        for (let j = 0; j < optionNames.length; j += 1) {\n          this.addNerRuleOptionTexts(finalLocale, entityName, optionNames[j], entity.options[optionNames[j]]);\n        }\n      }\n      if (entity.regex) {\n        if (Array.isArray(entity.regex)) {\n          for (let j = 0; j < entity.regex.length; j += 1) {\n            this.addNerRegexRule(finalLocale, entityName, entity.regex[j]);\n          }\n        } else if (typeof entity.regex === 'string' && entity.regex.trim()) {\n          this.addNerRegexRule(finalLocale, entityName, entity.regex);\n        }\n      }\n      if (entity.trim) {\n        for (let j = 0; j < entity.trim.length; j += 1) {\n          switch (entity.trim[j].position) {\n            case 'after':\n            case 'afterLast':\n            case 'afterFirst':\n            case 'before':\n            case 'beforeFirst':\n            case 'beforeLast':\n              this.addNerPositionCondition(finalLocale, entityName, entity.trim[j].position, entity.trim[j].words, entity.trim[j].opts);\n              break;\n            case 'between':\n              this.addNerBetweenCondition(finalLocale, entityName, entity.trim[j].leftWords, entity.trim[j].rightWords, entity.trim[j].opts);\n              break;\n            case 'betweenLast':\n              this.addNerBetweenLastCondition(finalLocale, entityName, entity.trim[j].leftWords, entity.trim[j].rightWords, entity.trim[j].opts);\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    }\n  }\n  addData(data, locale, domain) {\n    for (let i = 0; i < data.length; i += 1) {\n      const current = data[i];\n      const {\n        intent,\n        utterances,\n        answers,\n        slotFilling,\n        actions\n      } = current;\n      for (let j = 0; j < utterances.length; j += 1) {\n        if (domain) {\n          this.assignDomain(locale, intent, domain.name);\n        }\n        this.addDocument(locale, utterances[j], intent);\n      }\n      if (answers) {\n        for (let j = 0; j < answers.length; j += 1) {\n          const answer = answers[j];\n          if (typeof answer === 'string') {\n            this.addAnswer(locale, intent, answer);\n          } else {\n            this.addAnswer(locale, intent, answer.answer, answer.opts);\n          }\n        }\n      }\n      if (slotFilling) {\n        const entities = Object.keys(slotFilling);\n        for (let j = 0; j < entities.length; j += 1) {\n          const slot = slotFilling[entities[j]];\n          let mandatory;\n          const slotQuestions = {};\n          if (typeof slot === 'string') {\n            slotQuestions[locale] = slot;\n            mandatory = true;\n          } else {\n            slotQuestions[locale] = slot.question;\n            mandatory = slot.mandatory || false;\n          }\n          this.slotManager.updateSlot(intent, entities[j], mandatory, slotQuestions);\n        }\n      }\n      if (actions) {\n        actions.forEach(action => {\n          if (!action) return;\n          if (typeof action === 'object') {\n            if (!action.name) return;\n            this.addAction(intent, action.name, action.parameters || []);\n          } else {\n            this.addAction(intent, action, []);\n          }\n        });\n      }\n    }\n  }\n  async addCorpus(fileName) {\n    if (fileName.importer) {\n      await this.addImported(fileName);\n    } else {\n      let corpus = fileName;\n      const fs = this.container.get('fs');\n      if (typeof fileName === 'string') {\n        const fileData = await fs.readFile(fileName);\n        if (!fileData) {\n          throw new Error(`Corpus not found \"${fileName}\"`);\n        }\n        corpus = typeof fileData === 'string' ? JSON.parse(fileData) : fileData;\n      }\n      if (corpus.contextData) {\n        let {\n          contextData\n        } = corpus;\n        if (typeof corpus.contextData === 'string') {\n          contextData = JSON.parse(await fs.readFile(corpus.contextData));\n        }\n        const contextManager = this.container.get('context-manager');\n        const keys = Object.keys(contextData);\n        for (let i = 0; i < keys.length; i += 1) {\n          contextManager.defaultData[keys[i]] = contextData[keys[i]];\n        }\n      }\n      if (corpus.domains) {\n        if (corpus.entities) {\n          this.addEntities(corpus.entities);\n        }\n        for (let i = 0; i < corpus.domains.length; i += 1) {\n          const domain = corpus.domains[i];\n          const {\n            data,\n            entities\n          } = domain;\n          const locale = domain.locale.slice(0, 2);\n          this.addLanguage(locale);\n          if (entities) {\n            this.addEntities(entities, locale);\n          }\n          this.addData(data, locale, domain);\n        }\n      } else {\n        const locale = corpus.locale.slice(0, 2);\n        this.addLanguage(locale);\n        const {\n          data,\n          entities\n        } = corpus;\n        if (entities) {\n          this.addEntities(entities, locale);\n        }\n        this.addData(data, locale);\n      }\n    }\n  }\n  getSentiment(locale, utterance) {\n    if (typeof locale === 'object') {\n      return this.sentiment.process(locale);\n    }\n    if (!utterance) {\n      utterance = locale;\n      locale = this.guessLanguage(utterance);\n    }\n    return this.sentiment.process({\n      utterance,\n      locale\n    });\n  }\n  describeLanguage(locale, name) {\n    this.nluManager.describeLanguage(locale, name);\n  }\n  async train() {\n    this.nluManager.addLanguage(this.settings.languages);\n    const result = await this.nluManager.train();\n    if (this.settings.autoSave) {\n      await this.save(this.settings.modelFileName, true);\n    }\n    return result;\n  }\n  async classify(locale, utterance, settings) {\n    return this.nluManager.process(locale, utterance, settings || this.settings.nlu);\n  }\n  async extractEntities(locale, utterance, context, settings) {\n    if (typeof locale === 'object') {\n      return this.ner.process(locale);\n    }\n    if (!utterance) {\n      utterance = locale;\n      locale = undefined;\n    }\n    if (!locale) {\n      locale = this.guessLanguage(utterance);\n    }\n    const output = await this.ner.process({\n      locale,\n      utterance,\n      context,\n      settings: this.applySettings(settings, this.settings.ner)\n    });\n    return output;\n  }\n  organizeEntities(entities) {\n    const dict = {};\n    for (let i = 0; i < entities.length; i += 1) {\n      const entity = entities[i];\n      if (!dict[entity.entity]) {\n        dict[entity.entity] = [];\n      }\n      dict[entity.entity].push(entity);\n    }\n    const result = [];\n    Object.keys(dict).forEach(key => {\n      const arr = dict[key];\n      if (arr.length === 1) {\n        result.push(arr[0]);\n      } else {\n        for (let i = 0; i < arr.length; i += 1) {\n          arr[i].alias = `${key}_${i}`;\n        }\n        result.push({\n          entity: key,\n          isList: true,\n          items: arr\n        });\n      }\n    });\n    return result;\n  }\n  structureEntities(output) {\n    const organizedEntities = this.organizeEntities(output.entities);\n    if (!output.context.entities) {\n      output.context.entities = {};\n    }\n    for (let i = 0; i < organizedEntities.length; i += 1) {\n      const entity = organizedEntities[i];\n      output.context.entities[entity.entity] = entity;\n      if (entity.alias) {\n        output.context[entity.alias] = entity.sourceText;\n      }\n      if (entity.isList) {\n        for (let j = 0; j < entity.items.length; j += 1) {\n          output.context[entity.items[j].alias] = entity.items[j].sourceText;\n        }\n      } else {\n        // assume that there could be more than one entity with the same name\n        output.context[`${entity.entity}_0`] = entity.sourceText;\n      }\n      output.context[entity.entity] = entity.isList ? entity.items[0].sourceText : entity.sourceText;\n    }\n    return output;\n  }\n  async process(locale, utterance, srcContext, settings) {\n    let sourceInput;\n    let context = srcContext;\n    if (typeof locale === 'object') {\n      if (typeof utterance === 'object' && utterance.value) {\n        locale = undefined;\n        utterance = utterance.value;\n      } else {\n        sourceInput = locale;\n      }\n    }\n    if (!sourceInput) {\n      if (!utterance) {\n        utterance = locale;\n        locale = undefined;\n      }\n      if (!locale) {\n        locale = this.guessLanguage(utterance);\n      }\n      sourceInput = {\n        locale,\n        utterance,\n        settings\n      };\n      if (settings) {\n        if (settings.activity && !sourceInput.activity) {\n          sourceInput.activity = settings.activity;\n        }\n        if (settings.conversationId && !sourceInput.activity) {\n          sourceInput.activity = {\n            conversation: {\n              id: settings.conversationId\n            }\n          };\n        }\n      }\n    } else {\n      locale = sourceInput.locale;\n      utterance = sourceInput.utterance || sourceInput.message || sourceInput.text;\n    }\n    if (!context) {\n      context = await this.contextManager.getContext(sourceInput);\n    }\n    context.channel = sourceInput.channel;\n    context.app = sourceInput.app;\n    context.from = sourceInput.from || null;\n    const input = {\n      locale,\n      utterance,\n      context,\n      settings: this.applySettings(settings, this.settings.nlu)\n    };\n    const forceNER = input.settings && 'forceNER' in input.settings ? input.settings.forceNER : this.forceNER;\n    let output = await this.nluManager.process(input);\n    if (forceNER || !this.slotManager.isEmpty) {\n      const optionalUtterance = await this.ner.generateEntityUtterance(output.locale || locale, utterance);\n      if (optionalUtterance && optionalUtterance !== utterance) {\n        const optionalInput = {\n          locale: output.locale || locale,\n          utterance: optionalUtterance,\n          context,\n          settings: this.applySettings(settings, this.settings.nlu)\n        };\n        const optionalOutput = await this.nluManager.process(optionalInput);\n        if (optionalOutput && (optionalOutput.score > output.score || output.intent === 'None')) {\n          output = optionalOutput;\n          output.utterance = utterance;\n          output.optionalUtterance = optionalUtterance;\n        }\n      }\n    }\n    if (output.score < this.settings.threshold) {\n      output.score = 1;\n      output.intent = 'None';\n    }\n    output.context = context;\n    if (forceNER || !this.slotManager.isEmpty) {\n      output = await this.ner.process({\n        ...output\n      });\n    } else {\n      output.entities = [];\n      output.sourceEntities = [];\n    }\n    const stemmer = this.container.get(`stemmer-${output.locale}`);\n    if (stemmer && stemmer.lastFill) {\n      stemmer.lastFill(output);\n    }\n    output = this.structureEntities(output);\n    if (forceNER || !this.slotManager.isEmpty) {\n      if (this.slotManager.process(output, context)) {\n        // structure entities again because slots may have added\n        output = this.structureEntities(output);\n      }\n      context.slotFill = output.slotFill;\n    }\n    if (this.settings.executeActionsBeforeAnswers) {\n      output = await this.actionManager.run({\n        ...output\n      });\n    }\n    if (this.settings.executeActionsBeforeAnswers && output.answer) {\n      // Render answer from actions and use as final answer\n      output.answer = this.nlgManager.renderText(output.answer, context);\n    } else {\n      const answers = await this.nlgManager.run({\n        ...output\n      });\n      output.answers = answers.answers;\n      output.answer = answers.answer;\n    }\n    if (output.srcAnswer) {\n      // Re-Render Answer to also replace newly added entities in srcAnswer\n      output.answer = this.nlgManager.renderText(output.srcAnswer, context);\n    }\n    if (!this.settings.executeActionsBeforeAnswers) {\n      output = await this.actionManager.run({\n        ...output\n      });\n    }\n    if (this.settings.calculateSentiment) {\n      const sentiment = await this.getSentiment(locale, utterance);\n      output.sentiment = sentiment ? sentiment.sentiment : undefined;\n    }\n    await this.contextManager.setContext(sourceInput, context);\n    delete output.context;\n    delete output.settings;\n    const result = sourceInput ? this.applySettings(sourceInput, output) : output;\n    if (result.intent === 'None' && !result.answer) {\n      const openQuestion = this.container.get('open-question');\n      if (openQuestion) {\n        const qnaAnswer = await openQuestion.getAnswer(result.locale, result.utterance);\n        if (qnaAnswer && qnaAnswer.answer && qnaAnswer.answer.length > 0) {\n          result.answer = qnaAnswer.answer;\n          result.isOpenQuestionAnswer = true;\n          result.openQuestionFirstCharacter = qnaAnswer.position;\n          result.openQuestionScore = qnaAnswer.score;\n        }\n      }\n    }\n    if (this.onIntent) {\n      await this.onIntent(this, result);\n    } else {\n      const eventName = `onIntent(${result.intent})`;\n      const pipeline = this.container.getPipeline(eventName);\n      if (pipeline) {\n        await this.container.runPipeline(pipeline, result, this);\n      }\n    }\n    return result;\n  }\n  toJSON() {\n    const result = {\n      settings: {\n        ...this.settings\n      },\n      nluManager: this.nluManager.toJSON(),\n      ner: this.ner.toJSON(),\n      nlgManager: this.nlgManager.toJSON(),\n      actionManager: this.actionManager.toJSON(),\n      slotManager: this.slotManager.save()\n    };\n    delete result.settings.container;\n    return result;\n  }\n  fromJSON(json) {\n    this.applySettings(this.settings, json.settings);\n    this.nluManager.fromJSON(json.nluManager);\n    this.ner.fromJSON(json.ner);\n    this.nlgManager.fromJSON(json.nlgManager);\n    this.actionManager.fromJSON(json.actionManager);\n    this.slotManager.load(json.slotManager);\n  }\n  export() {\n    let minified = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const clone = this.toJSON();\n    return minified ? JSON.stringify(clone) : JSON.stringify(clone, null, 2);\n  }\n  import(data) {\n    const clone = typeof data === 'string' ? JSON.parse(data) : data;\n    this.fromJSON(clone);\n  }\n  async save(srcFileName) {\n    let minified = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const fs = this.container.get('fs');\n    const fileName = srcFileName || 'model.nlp';\n    await fs.writeFile(fileName, this.export(minified));\n  }\n  async load(srcFileName) {\n    const fs = this.container.get('fs');\n    const fileName = srcFileName || 'model.nlp';\n    const data = await fs.readFile(fileName);\n    if (data) {\n      this.import(data);\n      return true;\n    }\n    return false;\n  }\n}\nmodule.exports = Nlp;","map":{"version":3,"names":["Clonable","containerBootstrap","require","NluManager","NluNeural","Ner","ExtractorEnum","ExtractorRegex","ExtractorTrim","ExtractorBuiltin","ActionManager","NlgManager","SentimentAnalyzer","SlotManager","ContextManager","Nlp","constructor","settings","arguments","length","undefined","container","applySettings","tag","registerDefault","getConfiguration","nluManager","get","nlu","ner","nlgManager","nlg","actionManager","action","sentiment","slotManager","slot","contextManager","context","forceNER","initialize","registerConfiguration","threshold","autoLoad","autoSave","modelFileName","executeActionsBeforeAnswers","use","register","locales","Object","keys","i","locale","domains","j","domain","className","useNlu","languages","addLanguage","calculateSentiment","start","corpora","addCorpora","loadOrTrain","loaded","load","train","clazz","Array","isArray","config","nluByDomain","domainName","guessLanguage","input","removeLanguage","addDocument","utterance","intent","entities","getEntitiesFromUtterance","addBatch","add","removeDocument","remove","getRulesByName","name","addNerRule","type","rule","addRule","removeNerRule","removeRule","addNerRuleOptionTexts","option","texts","addRuleOptionTexts","removeNerRuleOptionTexts","removeRuleOptionTexts","addNerRegexRule","regex","addRegexRule","addNerBetweenCondition","left","right","opts","addBetweenCondition","addNerBetweenLastCondition","addBetweenLastCondition","addNerPositionCondition","position","words","addPositionCondition","addNerAfterCondition","addAfterCondition","addNerAfterFirstCondition","addAfterFirstCondition","addNerAfterLastCondition","addAfterLastCondition","addNerBeforeCondition","addBeforeCondition","addNerBeforeFirstCondition","addBeforeFirstCondition","addNerBeforeLastCondition","addBeforeLastCondition","assignDomain","getIntentDomain","getDomains","addAction","parameters","fn","registerActionFunction","registerActionInMap","getActions","findActions","removeAction","removeActions","removeActionFunction","removeActionFromMap","addAnswer","answer","removeAnswer","findAllAnswers","response","answers","names","addCorpus","addImported","content","filename","fs","readFile","Error","importer","transform","addEntities","entityName","entity","finalLocale","slice","options","optionNames","trim","leftWords","rightWords","addData","data","current","utterances","slotFilling","actions","mandatory","slotQuestions","question","updateSlot","forEach","fileName","corpus","fileData","JSON","parse","contextData","defaultData","getSentiment","process","describeLanguage","result","save","classify","extractEntities","output","organizeEntities","dict","push","key","arr","alias","isList","items","structureEntities","organizedEntities","sourceText","srcContext","sourceInput","value","activity","conversationId","conversation","id","message","text","getContext","channel","app","from","isEmpty","optionalUtterance","generateEntityUtterance","optionalInput","optionalOutput","score","sourceEntities","stemmer","lastFill","slotFill","run","renderText","srcAnswer","setContext","openQuestion","qnaAnswer","getAnswer","isOpenQuestionAnswer","openQuestionFirstCharacter","openQuestionScore","onIntent","eventName","pipeline","getPipeline","runPipeline","toJSON","fromJSON","json","export","minified","clone","stringify","import","srcFileName","writeFile","module","exports"],"sources":["/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/node_modules/@nlpjs/nlp/src/nlp.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { Clonable, containerBootstrap } = require('@nlpjs/core');\nconst { NluManager, NluNeural } = require('@nlpjs/nlu');\nconst {\n  Ner,\n  ExtractorEnum,\n  ExtractorRegex,\n  ExtractorTrim,\n  ExtractorBuiltin,\n} = require('@nlpjs/ner');\nconst { ActionManager, NlgManager } = require('@nlpjs/nlg');\nconst { SentimentAnalyzer } = require('@nlpjs/sentiment');\nconst { SlotManager } = require('@nlpjs/slot');\nconst ContextManager = require('./context-manager');\n\nclass Nlp extends Clonable {\n  constructor(settings = {}, container) {\n    super(\n      {\n        settings: {},\n        container: settings.container || container || containerBootstrap(),\n      },\n      container\n    );\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = `nlp`;\n    }\n    this.registerDefault();\n    this.applySettings(\n      this.settings,\n      this.container.getConfiguration(this.settings.tag)\n    );\n    this.nluManager = this.container.get('nlu-manager', this.settings.nlu);\n    this.ner = this.container.get('ner', this.settings.ner);\n    this.nlgManager = this.container.get('nlg-manager', this.settings.nlg);\n    this.actionManager = this.container.get(\n      'action-manager',\n      this.settings.action\n    );\n    this.sentiment = this.container.get(\n      'sentiment-analyzer',\n      this.settings.sentiment\n    );\n    this.slotManager = this.container.get('SlotManager', this.settings.slot);\n    this.contextManager = this.container.get(\n      'context-manager',\n      this.settings.context\n    );\n    this.forceNER = this.settings.forceNER;\n    if (this.forceNER === undefined) {\n      this.forceNER = false;\n    }\n    this.initialize();\n  }\n\n  registerDefault() {\n    this.container.registerConfiguration(\n      'nlp',\n      {\n        threshold: 0.5,\n        autoLoad: true,\n        autoSave: true,\n        modelFileName: 'model.nlp',\n        executeActionsBeforeAnswers: false,\n      },\n      false\n    );\n    this.use(NluManager);\n    this.use(Ner);\n    this.use(ExtractorEnum);\n    this.use(ExtractorRegex);\n    this.use(ExtractorTrim);\n    this.use(ExtractorBuiltin);\n    this.use(NlgManager);\n    this.use(ActionManager);\n    this.use(NluNeural);\n    this.use(SentimentAnalyzer);\n    this.use(ContextManager);\n    this.container.register('SlotManager', SlotManager, false);\n  }\n\n  initialize() {\n    if (this.settings.nlu) {\n      const locales = Object.keys(this.settings.nlu);\n      for (let i = 0; i < locales.length; i += 1) {\n        const locale = locales[i];\n        const domains = Object.keys(this.settings.nlu[locale]);\n        for (let j = 0; j < domains.length; j += 1) {\n          const domain = domains[j];\n          const settings = this.settings.nlu[locale][domain];\n          const { className } = settings;\n          delete settings.className;\n          this.useNlu(className, locale, domain, settings);\n        }\n      }\n    }\n    if (this.settings.languages) {\n      this.addLanguage(this.settings.languages);\n    }\n    if (this.settings.locales) {\n      this.addLanguage(this.settings.locales);\n    }\n    if (this.settings.calculateSentiment === undefined) {\n      this.settings.calculateSentiment = true;\n    }\n    if (this.settings.executeActionsBeforeAnswers === undefined) {\n      this.settings.executeActionsBeforeAnswers = false;\n    }\n  }\n\n  async start() {\n    if (this.settings.corpora) {\n      await this.addCorpora(this.settings.corpora);\n    }\n  }\n\n  async loadOrTrain() {\n    let loaded = false;\n    if (this.settings.autoLoad) {\n      loaded = await this.load(this.settings.modelFileName);\n    }\n    if (!loaded) {\n      await this.train();\n    }\n  }\n\n  useNlu(clazz, locale, domain, settings) {\n    if (!locale) {\n      locale = '??';\n    }\n    if (Array.isArray(locale)) {\n      for (let i = 0; i < locale.length; i += 1) {\n        this.useNlu(clazz, locale[i], domain, settings);\n      }\n    } else {\n      const className =\n        typeof clazz === 'string' ? clazz : this.container.use(clazz);\n      let config = this.container.getConfiguration(`domain-manager-${locale}`);\n      if (!config) {\n        config = {};\n        this.container.registerConfiguration(\n          `domain-manager-${locale}`,\n          config\n        );\n      }\n      if (!config.nluByDomain) {\n        config.nluByDomain = {};\n      }\n      const domainName = !domain || domain === '*' ? 'default' : domain;\n      if (!config.nluByDomain[domainName]) {\n        config.nluByDomain[domainName] = {};\n      }\n      config.nluByDomain[domainName].className = className;\n      config.nluByDomain[domainName].settings = settings;\n    }\n  }\n\n  guessLanguage(input) {\n    return this.nluManager.guessLanguage(input);\n  }\n\n  addLanguage(locales) {\n    return this.nluManager.addLanguage(locales);\n  }\n\n  removeLanguage(locales) {\n    return this.nluManager.removeLanguage(locales);\n  }\n\n  addDocument(locale, utterance, intent) {\n    const entities = this.ner.getEntitiesFromUtterance(utterance);\n    this.slotManager.addBatch(intent, entities);\n    return this.nluManager.add(locale, utterance, intent);\n  }\n\n  removeDocument(locale, utterance, intent) {\n    return this.nluManager.remove(locale, utterance, intent);\n  }\n\n  getRulesByName(locale, name) {\n    return this.ner.getRulesByName(locale, name);\n  }\n\n  addNerRule(locale, name, type, rule) {\n    return this.ner.addRule(locale, name, type, rule);\n  }\n\n  removeNerRule(locale, name, rule) {\n    return this.ner.removeRule(locale, name, rule);\n  }\n\n  addNerRuleOptionTexts(locale, name, option, texts) {\n    return this.ner.addRuleOptionTexts(locale, name, option, texts);\n  }\n\n  removeNerRuleOptionTexts(locale, name, option, texts) {\n    return this.ner.removeRuleOptionTexts(locale, name, option, texts);\n  }\n\n  addNerRegexRule(locale, name, regex) {\n    return this.ner.addRegexRule(locale, name, regex);\n  }\n\n  addNerBetweenCondition(locale, name, left, right, opts) {\n    return this.ner.addBetweenCondition(locale, name, left, right, opts);\n  }\n\n  addNerBetweenLastCondition(locale, name, left, right, opts) {\n    return this.ner.addBetweenLastCondition(locale, name, left, right, opts);\n  }\n\n  addNerPositionCondition(locale, name, position, words, opts) {\n    return this.ner.addPositionCondition(locale, name, position, words, opts);\n  }\n\n  addNerAfterCondition(locale, name, words, opts) {\n    return this.ner.addAfterCondition(locale, name, words, opts);\n  }\n\n  addNerAfterFirstCondition(locale, name, words, opts) {\n    return this.ner.addAfterFirstCondition(locale, name, words, opts);\n  }\n\n  addNerAfterLastCondition(locale, name, words, opts) {\n    return this.ner.addAfterLastCondition(locale, name, words, opts);\n  }\n\n  addNerBeforeCondition(locale, name, words, opts) {\n    return this.ner.addBeforeCondition(locale, name, words, opts);\n  }\n\n  addNerBeforeFirstCondition(locale, name, words, opts) {\n    return this.ner.addBeforeFirstCondition(locale, name, words, opts);\n  }\n\n  addNerBeforeLastCondition(locale, name, words, opts) {\n    return this.ner.addBeforeLastCondition(locale, name, words, opts);\n  }\n\n  assignDomain(locale, intent, domain) {\n    return this.nluManager.assignDomain(locale, intent, domain);\n  }\n\n  getIntentDomain(locale, intent) {\n    return this.nluManager.getIntentDomain(locale, intent);\n  }\n\n  getDomains() {\n    return this.nluManager.getDomains();\n  }\n\n  addAction(intent, action, parameters, fn) {\n    return this.actionManager.addAction(intent, action, parameters, fn);\n  }\n\n  registerActionFunction(action, fn) {\n    return this.actionManager.registerActionInMap(action, fn);\n  }\n\n  getActions(intent) {\n    return this.actionManager.findActions(intent);\n  }\n\n  removeAction(intent, action, parameters) {\n    return this.actionManager.removeAction(intent, action, parameters);\n  }\n\n  removeActions(intent) {\n    return this.actionManager.removeActions(intent);\n  }\n\n  removeActionFunction(action) {\n    return this.actionManager.removeActionFromMap(action);\n  }\n\n  addAnswer(locale, intent, answer, opts) {\n    return this.nlgManager.add(locale, intent, answer, opts);\n  }\n\n  removeAnswer(locale, intent, answer, opts) {\n    return this.nlgManager.remove(locale, intent, answer, opts);\n  }\n\n  findAllAnswers(locale, intent) {\n    const response = this.nlgManager.findAllAnswers({ locale, intent });\n    return response.answers;\n  }\n\n  async addCorpora(names) {\n    if (names) {\n      if (Array.isArray(names)) {\n        for (let i = 0; i < names.length; i += 1) {\n          await this.addCorpus(names[i]);\n        }\n      } else {\n        await this.addCorpus(names);\n      }\n    }\n  }\n\n  async addImported(input) {\n    let content;\n    if (input.content) {\n      content = input.content;\n    } else if (input.filename) {\n      const fs = this.container.get('fs');\n      content = await fs.readFile(input.filename);\n      if (!content) {\n        throw new Error(`Corpus not found \"${input.filename}\"`);\n      }\n    } else {\n      throw new Error('Corpus information without content or file name');\n    }\n    let importer = this.container.get(input.importer);\n    if (!importer) {\n      importer = this.container.get(`${input.importer}-importer`);\n    }\n    if (!importer) {\n      throw new Error(`Corpus importer not found: ${input.importer}`);\n    }\n    const corpora = importer.transform(content, input);\n    for (let i = 0; i < corpora.length; i += 1) {\n      this.addCorpus(corpora[i]);\n    }\n  }\n\n  addEntities(entities, locale) {\n    const keys = Object.keys(entities);\n    for (let i = 0; i < keys.length; i += 1) {\n      const entityName = keys[i];\n      let entity = entities[entityName];\n      if (typeof entity === 'string') {\n        entity = { regex: [entity] };\n      }\n      let finalLocale = entity.locale;\n      if (!finalLocale) {\n        finalLocale = locale || 'en';\n      }\n      if (typeof finalLocale === 'string') {\n        finalLocale = finalLocale.slice(0, 2);\n      }\n      if (entity.options) {\n        const optionNames = Object.keys(entity.options);\n        for (let j = 0; j < optionNames.length; j += 1) {\n          this.addNerRuleOptionTexts(\n            finalLocale,\n            entityName,\n            optionNames[j],\n            entity.options[optionNames[j]]\n          );\n        }\n      }\n      if (entity.regex) {\n        if (Array.isArray(entity.regex)) {\n          for (let j = 0; j < entity.regex.length; j += 1) {\n            this.addNerRegexRule(finalLocale, entityName, entity.regex[j]);\n          }\n        } else if (typeof entity.regex === 'string' && entity.regex.trim()) {\n          this.addNerRegexRule(finalLocale, entityName, entity.regex);\n        }\n      }\n      if (entity.trim) {\n        for (let j = 0; j < entity.trim.length; j += 1) {\n          switch (entity.trim[j].position) {\n            case 'after':\n            case 'afterLast':\n            case 'afterFirst':\n            case 'before':\n            case 'beforeFirst':\n            case 'beforeLast':\n              this.addNerPositionCondition(\n                finalLocale,\n                entityName,\n                entity.trim[j].position,\n                entity.trim[j].words,\n                entity.trim[j].opts\n              );\n              break;\n            case 'between':\n              this.addNerBetweenCondition(\n                finalLocale,\n                entityName,\n                entity.trim[j].leftWords,\n                entity.trim[j].rightWords,\n                entity.trim[j].opts\n              );\n              break;\n            case 'betweenLast':\n              this.addNerBetweenLastCondition(\n                finalLocale,\n                entityName,\n                entity.trim[j].leftWords,\n                entity.trim[j].rightWords,\n                entity.trim[j].opts\n              );\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    }\n  }\n\n  addData(data, locale, domain) {\n    for (let i = 0; i < data.length; i += 1) {\n      const current = data[i];\n      const { intent, utterances, answers, slotFilling, actions } = current;\n      for (let j = 0; j < utterances.length; j += 1) {\n        if (domain) {\n          this.assignDomain(locale, intent, domain.name);\n        }\n        this.addDocument(locale, utterances[j], intent);\n      }\n      if (answers) {\n        for (let j = 0; j < answers.length; j += 1) {\n          const answer = answers[j];\n          if (typeof answer === 'string') {\n            this.addAnswer(locale, intent, answer);\n          } else {\n            this.addAnswer(locale, intent, answer.answer, answer.opts);\n          }\n        }\n      }\n      if (slotFilling) {\n        const entities = Object.keys(slotFilling);\n        for (let j = 0; j < entities.length; j += 1) {\n          const slot = slotFilling[entities[j]];\n          let mandatory;\n          const slotQuestions = {};\n          if (typeof slot === 'string') {\n            slotQuestions[locale] = slot;\n            mandatory = true;\n          } else {\n            slotQuestions[locale] = slot.question;\n            mandatory = slot.mandatory || false;\n          }\n          this.slotManager.updateSlot(\n            intent,\n            entities[j],\n            mandatory,\n            slotQuestions\n          );\n        }\n      }\n      if (actions) {\n        actions.forEach((action) => {\n          if (!action) return;\n          if (typeof action === 'object') {\n            if (!action.name) return;\n            this.addAction(intent, action.name, action.parameters || []);\n          } else {\n            this.addAction(intent, action, []);\n          }\n        });\n      }\n    }\n  }\n\n  async addCorpus(fileName) {\n    if (fileName.importer) {\n      await this.addImported(fileName);\n    } else {\n      let corpus = fileName;\n      const fs = this.container.get('fs');\n      if (typeof fileName === 'string') {\n        const fileData = await fs.readFile(fileName);\n        if (!fileData) {\n          throw new Error(`Corpus not found \"${fileName}\"`);\n        }\n        corpus = typeof fileData === 'string' ? JSON.parse(fileData) : fileData;\n      }\n      if (corpus.contextData) {\n        let { contextData } = corpus;\n        if (typeof corpus.contextData === 'string') {\n          contextData = JSON.parse(await fs.readFile(corpus.contextData));\n        }\n        const contextManager = this.container.get('context-manager');\n        const keys = Object.keys(contextData);\n        for (let i = 0; i < keys.length; i += 1) {\n          contextManager.defaultData[keys[i]] = contextData[keys[i]];\n        }\n      }\n      if (corpus.domains) {\n        if (corpus.entities) {\n          this.addEntities(corpus.entities);\n        }\n        for (let i = 0; i < corpus.domains.length; i += 1) {\n          const domain = corpus.domains[i];\n          const { data, entities } = domain;\n          const locale = domain.locale.slice(0, 2);\n          this.addLanguage(locale);\n          if (entities) {\n            this.addEntities(entities, locale);\n          }\n          this.addData(data, locale, domain);\n        }\n      } else {\n        const locale = corpus.locale.slice(0, 2);\n        this.addLanguage(locale);\n        const { data, entities } = corpus;\n        if (entities) {\n          this.addEntities(entities, locale);\n        }\n        this.addData(data, locale);\n      }\n    }\n  }\n\n  getSentiment(locale, utterance) {\n    if (typeof locale === 'object') {\n      return this.sentiment.process(locale);\n    }\n    if (!utterance) {\n      utterance = locale;\n      locale = this.guessLanguage(utterance);\n    }\n    return this.sentiment.process({ utterance, locale });\n  }\n\n  describeLanguage(locale, name) {\n    this.nluManager.describeLanguage(locale, name);\n  }\n\n  async train() {\n    this.nluManager.addLanguage(this.settings.languages);\n    const result = await this.nluManager.train();\n    if (this.settings.autoSave) {\n      await this.save(this.settings.modelFileName, true);\n    }\n    return result;\n  }\n\n  async classify(locale, utterance, settings) {\n    return this.nluManager.process(\n      locale,\n      utterance,\n      settings || this.settings.nlu\n    );\n  }\n\n  async extractEntities(locale, utterance, context, settings) {\n    if (typeof locale === 'object') {\n      return this.ner.process(locale);\n    }\n    if (!utterance) {\n      utterance = locale;\n      locale = undefined;\n    }\n    if (!locale) {\n      locale = this.guessLanguage(utterance);\n    }\n    const output = await this.ner.process({\n      locale,\n      utterance,\n      context,\n      settings: this.applySettings(settings, this.settings.ner),\n    });\n    return output;\n  }\n\n  organizeEntities(entities) {\n    const dict = {};\n    for (let i = 0; i < entities.length; i += 1) {\n      const entity = entities[i];\n      if (!dict[entity.entity]) {\n        dict[entity.entity] = [];\n      }\n      dict[entity.entity].push(entity);\n    }\n    const result = [];\n    Object.keys(dict).forEach((key) => {\n      const arr = dict[key];\n      if (arr.length === 1) {\n        result.push(arr[0]);\n      } else {\n        for (let i = 0; i < arr.length; i += 1) {\n          arr[i].alias = `${key}_${i}`;\n        }\n        result.push({\n          entity: key,\n          isList: true,\n          items: arr,\n        });\n      }\n    });\n    return result;\n  }\n\n  structureEntities(output) {\n    const organizedEntities = this.organizeEntities(output.entities);\n    if (!output.context.entities) {\n      output.context.entities = {};\n    }\n    for (let i = 0; i < organizedEntities.length; i += 1) {\n      const entity = organizedEntities[i];\n      output.context.entities[entity.entity] = entity;\n      if (entity.alias) {\n        output.context[entity.alias] = entity.sourceText;\n      }\n      if (entity.isList) {\n        for (let j = 0; j < entity.items.length; j += 1) {\n          output.context[entity.items[j].alias] = entity.items[j].sourceText;\n        }\n      } else {\n        // assume that there could be more than one entity with the same name\n        output.context[`${entity.entity}_0`] = entity.sourceText;\n      }\n      output.context[entity.entity] = entity.isList\n        ? entity.items[0].sourceText\n        : entity.sourceText;\n    }\n    return output;\n  }\n\n  async process(locale, utterance, srcContext, settings) {\n    let sourceInput;\n    let context = srcContext;\n    if (typeof locale === 'object') {\n      if (typeof utterance === 'object' && utterance.value) {\n        locale = undefined;\n        utterance = utterance.value;\n      } else {\n        sourceInput = locale;\n      }\n    }\n    if (!sourceInput) {\n      if (!utterance) {\n        utterance = locale;\n        locale = undefined;\n      }\n      if (!locale) {\n        locale = this.guessLanguage(utterance);\n      }\n      sourceInput = {\n        locale,\n        utterance,\n        settings,\n      };\n      if (settings) {\n        if (settings.activity && !sourceInput.activity) {\n          sourceInput.activity = settings.activity;\n        }\n        if (settings.conversationId && !sourceInput.activity) {\n          sourceInput.activity = {\n            conversation: {\n              id: settings.conversationId,\n            },\n          };\n        }\n      }\n    } else {\n      locale = sourceInput.locale;\n      utterance =\n        sourceInput.utterance || sourceInput.message || sourceInput.text;\n    }\n    if (!context) {\n      context = await this.contextManager.getContext(sourceInput);\n    }\n    context.channel = sourceInput.channel;\n    context.app = sourceInput.app;\n    context.from = sourceInput.from || null;\n    const input = {\n      locale,\n      utterance,\n      context,\n      settings: this.applySettings(settings, this.settings.nlu),\n    };\n    const forceNER =\n      input.settings && 'forceNER' in input.settings\n        ? input.settings.forceNER\n        : this.forceNER;\n    let output = await this.nluManager.process(input);\n    if (forceNER || !this.slotManager.isEmpty) {\n      const optionalUtterance = await this.ner.generateEntityUtterance(\n        output.locale || locale,\n        utterance\n      );\n      if (optionalUtterance && optionalUtterance !== utterance) {\n        const optionalInput = {\n          locale: output.locale || locale,\n          utterance: optionalUtterance,\n          context,\n          settings: this.applySettings(settings, this.settings.nlu),\n        };\n        const optionalOutput = await this.nluManager.process(optionalInput);\n        if (\n          optionalOutput &&\n          (optionalOutput.score > output.score || output.intent === 'None')\n        ) {\n          output = optionalOutput;\n          output.utterance = utterance;\n          output.optionalUtterance = optionalUtterance;\n        }\n      }\n    }\n    if (output.score < this.settings.threshold) {\n      output.score = 1;\n      output.intent = 'None';\n    }\n    output.context = context;\n    if (forceNER || !this.slotManager.isEmpty) {\n      output = await this.ner.process({ ...output });\n    } else {\n      output.entities = [];\n      output.sourceEntities = [];\n    }\n    const stemmer = this.container.get(`stemmer-${output.locale}`);\n    if (stemmer && stemmer.lastFill) {\n      stemmer.lastFill(output);\n    }\n    output = this.structureEntities(output);\n    if (forceNER || !this.slotManager.isEmpty) {\n      if (this.slotManager.process(output, context)) {\n        // structure entities again because slots may have added\n        output = this.structureEntities(output);\n      }\n      context.slotFill = output.slotFill;\n    }\n    if (this.settings.executeActionsBeforeAnswers) {\n      output = await this.actionManager.run({ ...output });\n    }\n    if (this.settings.executeActionsBeforeAnswers && output.answer) {\n      // Render answer from actions and use as final answer\n      output.answer = this.nlgManager.renderText(output.answer, context);\n    } else {\n      const answers = await this.nlgManager.run({ ...output });\n      output.answers = answers.answers;\n      output.answer = answers.answer;\n    }\n    if (output.srcAnswer) {\n      // Re-Render Answer to also replace newly added entities in srcAnswer\n      output.answer = this.nlgManager.renderText(output.srcAnswer, context);\n    }\n    if (!this.settings.executeActionsBeforeAnswers) {\n      output = await this.actionManager.run({ ...output });\n    }\n    if (this.settings.calculateSentiment) {\n      const sentiment = await this.getSentiment(locale, utterance);\n      output.sentiment = sentiment ? sentiment.sentiment : undefined;\n    }\n    await this.contextManager.setContext(sourceInput, context);\n    delete output.context;\n    delete output.settings;\n    const result = sourceInput\n      ? this.applySettings(sourceInput, output)\n      : output;\n    if (result.intent === 'None' && !result.answer) {\n      const openQuestion = this.container.get('open-question');\n      if (openQuestion) {\n        const qnaAnswer = await openQuestion.getAnswer(\n          result.locale,\n          result.utterance\n        );\n        if (qnaAnswer && qnaAnswer.answer && qnaAnswer.answer.length > 0) {\n          result.answer = qnaAnswer.answer;\n          result.isOpenQuestionAnswer = true;\n          result.openQuestionFirstCharacter = qnaAnswer.position;\n          result.openQuestionScore = qnaAnswer.score;\n        }\n      }\n    }\n    if (this.onIntent) {\n      await this.onIntent(this, result);\n    } else {\n      const eventName = `onIntent(${result.intent})`;\n      const pipeline = this.container.getPipeline(eventName);\n      if (pipeline) {\n        await this.container.runPipeline(pipeline, result, this);\n      }\n    }\n    return result;\n  }\n\n  toJSON() {\n    const result = {\n      settings: { ...this.settings },\n      nluManager: this.nluManager.toJSON(),\n      ner: this.ner.toJSON(),\n      nlgManager: this.nlgManager.toJSON(),\n      actionManager: this.actionManager.toJSON(),\n      slotManager: this.slotManager.save(),\n    };\n    delete result.settings.container;\n\n    return result;\n  }\n\n  fromJSON(json) {\n    this.applySettings(this.settings, json.settings);\n    this.nluManager.fromJSON(json.nluManager);\n    this.ner.fromJSON(json.ner);\n    this.nlgManager.fromJSON(json.nlgManager);\n    this.actionManager.fromJSON(json.actionManager);\n    this.slotManager.load(json.slotManager);\n  }\n\n  export(minified = false) {\n    const clone = this.toJSON();\n    return minified ? JSON.stringify(clone) : JSON.stringify(clone, null, 2);\n  }\n\n  import(data) {\n    const clone = typeof data === 'string' ? JSON.parse(data) : data;\n    this.fromJSON(clone);\n  }\n\n  async save(srcFileName, minified = false) {\n    const fs = this.container.get('fs');\n    const fileName = srcFileName || 'model.nlp';\n    await fs.writeFile(fileName, this.export(minified));\n  }\n\n  async load(srcFileName) {\n    const fs = this.container.get('fs');\n    const fileName = srcFileName || 'model.nlp';\n    const data = await fs.readFile(fileName);\n    if (data) {\n      this.import(data);\n      return true;\n    }\n    return false;\n  }\n}\n\nmodule.exports = Nlp;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}