{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst fs = require('fs');\nconst {\n  BuiltinMicrosoft\n} = require('@nlpjs/builtin-microsoft');\nconst {\n  BuiltinDuckling\n} = require('@nlpjs/builtin-duckling');\nconst {\n  containerBootstrap\n} = require('@nlpjs/core-loader');\nconst {\n  Language\n} = require('@nlpjs/language');\nconst {\n  LangAll\n} = require('@nlpjs/lang-all');\nconst {\n  Nlp\n} = require('@nlpjs/nlp');\nconst {\n  Evaluator,\n  Template\n} = require('@nlpjs/evaluator');\nconst {\n  fs: requestfs\n} = require('@nlpjs/request');\nconst {\n  SentimentManager\n} = require('../sentiment');\nconst NlpExcelReader = require('./nlp-excel-reader');\nclass NlpManager {\n  constructor() {\n    let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.settings = settings;\n    if (!this.settings.container) {\n      this.settings.container = containerBootstrap();\n    }\n    this.container = this.settings.container;\n    this.container.registerConfiguration('ner', {\n      entityPreffix: '%',\n      entitySuffix: '%'\n    });\n    this.container.register('fs', requestfs);\n    this.container.register('Language', Language, false);\n    this.container.use(LangAll);\n    this.container.use(Evaluator);\n    this.container.use(Template);\n    this.nlp = new Nlp(this.settings);\n    this.sentimentManager = new SentimentManager();\n    if (this.settings.ner) {\n      if (this.settings.ner.ducklingUrl || this.settings.ner.useDuckling) {\n        const builtin = new BuiltinDuckling(this.settings.ner);\n        this.container.register('extract-builtin-??', builtin, true);\n      } else {\n        const builtin = new BuiltinMicrosoft(this.settings.ner);\n        this.container.register('extract-builtin-??', builtin, true);\n      }\n    } else {\n      const builtin = new BuiltinMicrosoft(this.settings.ner);\n      this.container.register('extract-builtin-??', builtin, true);\n    }\n  }\n  addDocument(locale, utterance, intent) {\n    return this.nlp.addDocument(locale, utterance, intent);\n  }\n  removeDocument(locale, utterance, intent) {\n    return this.nlp.removeDocument(locale, utterance, intent);\n  }\n  addLanguage(locale) {\n    return this.nlp.addLanguage(locale);\n  }\n  removeLanguage(locale) {\n    return this.nlp.removeLanguage(locale);\n  }\n  assignDomain(locale, intent, domain) {\n    return this.nlp.assignDomain(locale, intent, domain);\n  }\n  getIntentDomain(locale, intent) {\n    return this.nlp.getIntentDomain(locale, intent);\n  }\n  getDomains() {\n    return this.nlp.getDomains();\n  }\n  guessLanguage(text) {\n    return this.nlp.guessLanguage(text);\n  }\n  addAction(intent, action, parameters, fn) {\n    if (!fn) {\n      fn = this.settings.action ? this.settings.action[action] : undefined;\n    }\n    return this.nlp.addAction(intent, action, parameters, fn);\n  }\n  getActions(intent) {\n    return this.nlp.getActions(intent);\n  }\n  removeAction(intent, action, parameters) {\n    return this.nlp.removeAction(intent, action, parameters);\n  }\n  removeActions(intent) {\n    return this.nlp.removeActions(intent);\n  }\n  addAnswer(locale, intent, answer, opts) {\n    return this.nlp.addAnswer(locale, intent, answer, opts);\n  }\n  removeAnswer(locale, intent, answer, opts) {\n    return this.nlp.removeAnswer(locale, intent, answer, opts);\n  }\n  findAllAnswers(locale, intent) {\n    return this.nlp.findAllAnswers(locale, intent);\n  }\n  async getSentiment(locale, utterance) {\n    const sentiment = await this.nlp.getSentiment(locale, utterance);\n    return this.sentimentManager.translate(sentiment.sentiment);\n  }\n  addNamedEntityText(entityName, optionName, languages, texts) {\n    return this.nlp.addNerRuleOptionTexts(languages, entityName, optionName, texts);\n  }\n  removeNamedEntityText(entityName, optionName, languages, texts) {\n    return this.nlp.removeNerRuleOptionTexts(languages, entityName, optionName, texts);\n  }\n  addRegexEntity(entityName, languages, regex) {\n    return this.nlp.addNerRegexRule(languages, entityName, regex);\n  }\n  addBetweenCondition(locale, name, left, right, opts) {\n    return this.nlp.addNerBetweenCondition(locale, name, left, right, opts);\n  }\n  addPositionCondition(locale, name, position, words, opts) {\n    return this.nlp.addNerPositionCondition(locale, name, position, words, opts);\n  }\n  addAfterCondition(locale, name, words, opts) {\n    return this.nlp.addNerAfterCondition(locale, name, words, opts);\n  }\n  addAfterFirstCondition(locale, name, words, opts) {\n    return this.nlp.addNerAfterFirstCondition(locale, name, words, opts);\n  }\n  addAfterLastCondition(locale, name, words, opts) {\n    return this.nlp.addNerAfterLastCondition(locale, name, words, opts);\n  }\n  addBeforeCondition(locale, name, words, opts) {\n    return this.nlp.addNerBeforeCondition(locale, name, words, opts);\n  }\n  addBeforeFirstCondition(locale, name, words, opts) {\n    return this.nlp.addNerBeforeFirstCondition(locale, name, words, opts);\n  }\n  addBeforeLastCondition(locale, name, words, opts) {\n    return this.nlp.addNerBeforeLastCondition(locale, name, words, opts);\n  }\n  describeLanguage(locale, name) {\n    return this.nlp.describeLanguage(locale, name);\n  }\n  beginEdit() {}\n  train() {\n    return this.nlp.train();\n  }\n  classify(locale, utterance, settings) {\n    return this.nlp.classify(locale, utterance, settings);\n  }\n  async process(locale, utterance, context, settings) {\n    const result = await this.nlp.process(locale, utterance, context, settings);\n    if (this.settings.processTransformer) {\n      return this.settings.processTransformer(result);\n    }\n    return result;\n  }\n  extractEntities(locale, utterance, context, settings) {\n    return this.nlp.extractEntities(locale, utterance, context, settings);\n  }\n  toObj() {\n    return this.nlp.toJSON();\n  }\n  fromObj(obj) {\n    return this.nlp.fromJSON(obj);\n  }\n\n  /**\n   * Export NLP manager information as a string.\n   * @param {Boolean} minified If true, the returned JSON will have no spacing or indentation.\n   * @returns {String} NLP manager information as a JSON string.\n   */\n  export() {\n    let minified = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const clone = this.toObj();\n    return minified ? JSON.stringify(clone) : JSON.stringify(clone, null, 2);\n  }\n\n  /**\n   * Load NLP manager information from a string.\n   * @param {String|Object} data JSON string or object to load NLP manager information from.\n   */\n  import(data) {\n    const clone = typeof data === 'string' ? JSON.parse(data) : data;\n    this.fromObj(clone);\n  }\n\n  /**\n   * Save the NLP manager information into a file.\n   * @param {String} srcFileName Filename for saving the NLP manager.\n   */\n  save(srcFileName) {\n    let minified = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const fileName = srcFileName || 'model.nlp';\n    fs.writeFileSync(fileName, this.export(minified), 'utf8');\n  }\n\n  /**\n   * Load the NLP manager information from a file.\n   * @param {String} srcFilename Filename for loading the NLP manager.\n   */\n  load(srcFileName) {\n    const fileName = srcFileName || 'model.nlp';\n    const data = fs.readFileSync(fileName, 'utf8');\n    this.import(data);\n  }\n\n  /**\n   * Load the NLP manager information from an excel file.\n   * @param {Sting} srcFileName File name of the excel.\n   */\n  loadExcel() {\n    let fileName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'model.xls';\n    const reader = new NlpExcelReader(this);\n    reader.load(fileName);\n  }\n  async testCorpus(corpus) {\n    const {\n      data\n    } = corpus;\n    const result = {\n      total: 0,\n      good: 0,\n      bad: 0\n    };\n    const promises = [];\n    const intents = [];\n    for (let i = 0; i < data.length; i += 1) {\n      const intentData = data[i];\n      const {\n        tests\n      } = intentData;\n      for (let j = 0; j < tests.length; j += 1) {\n        promises.push(this.process(corpus.locale.slice(0, 2), tests[j]));\n        intents.push(intentData.intent);\n      }\n    }\n    result.total += promises.length;\n    const results = await Promise.all(promises);\n    for (let i = 0; i < results.length; i += 1) {\n      const current = results[i];\n      if (current.intent === intents[i]) {\n        result.good += 1;\n      } else {\n        result.bad += 1;\n      }\n    }\n    return result;\n  }\n  addCorpora(corpora) {\n    this.nlp.addCorpora(corpora);\n  }\n  addCorpus(corpus) {\n    this.nlp.addCorpus(corpus);\n  }\n  async trainAndEvaluate(fileName) {\n    let corpus = fileName;\n    if (typeof fileName === 'string') {\n      const nlpfs = this.container.get('fs');\n      const fileData = await nlpfs.readFile(fileName);\n      if (!fileData) {\n        throw new Error(`Corpus not found \"${fileName}\"`);\n      }\n      corpus = typeof fileData === 'string' ? JSON.parse(fileData) : fileData;\n    }\n    this.nlp.addCorpus(corpus);\n    await this.train();\n    return this.testCorpus(corpus);\n  }\n}\nmodule.exports = NlpManager;","map":{"version":3,"names":["fs","require","BuiltinMicrosoft","BuiltinDuckling","containerBootstrap","Language","LangAll","Nlp","Evaluator","Template","requestfs","SentimentManager","NlpExcelReader","NlpManager","constructor","settings","arguments","length","undefined","container","registerConfiguration","entityPreffix","entitySuffix","register","use","nlp","sentimentManager","ner","ducklingUrl","useDuckling","builtin","addDocument","locale","utterance","intent","removeDocument","addLanguage","removeLanguage","assignDomain","domain","getIntentDomain","getDomains","guessLanguage","text","addAction","action","parameters","fn","getActions","removeAction","removeActions","addAnswer","answer","opts","removeAnswer","findAllAnswers","getSentiment","sentiment","translate","addNamedEntityText","entityName","optionName","languages","texts","addNerRuleOptionTexts","removeNamedEntityText","removeNerRuleOptionTexts","addRegexEntity","regex","addNerRegexRule","addBetweenCondition","name","left","right","addNerBetweenCondition","addPositionCondition","position","words","addNerPositionCondition","addAfterCondition","addNerAfterCondition","addAfterFirstCondition","addNerAfterFirstCondition","addAfterLastCondition","addNerAfterLastCondition","addBeforeCondition","addNerBeforeCondition","addBeforeFirstCondition","addNerBeforeFirstCondition","addBeforeLastCondition","addNerBeforeLastCondition","describeLanguage","beginEdit","train","classify","process","context","result","processTransformer","extractEntities","toObj","toJSON","fromObj","obj","fromJSON","export","minified","clone","JSON","stringify","import","data","parse","save","srcFileName","fileName","writeFileSync","load","readFileSync","loadExcel","reader","testCorpus","corpus","total","good","bad","promises","intents","i","intentData","tests","j","push","slice","results","Promise","all","current","addCorpora","corpora","addCorpus","trainAndEvaluate","nlpfs","get","fileData","readFile","Error","module","exports"],"sources":["/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/node_modules/node-nlp/src/nlp/nlp-manager.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst fs = require('fs');\nconst { BuiltinMicrosoft } = require('@nlpjs/builtin-microsoft');\nconst { BuiltinDuckling } = require('@nlpjs/builtin-duckling');\nconst { containerBootstrap } = require('@nlpjs/core-loader');\nconst { Language } = require('@nlpjs/language');\nconst { LangAll } = require('@nlpjs/lang-all');\nconst { Nlp } = require('@nlpjs/nlp');\nconst { Evaluator, Template } = require('@nlpjs/evaluator');\nconst { fs: requestfs } = require('@nlpjs/request');\nconst { SentimentManager } = require('../sentiment');\nconst NlpExcelReader = require('./nlp-excel-reader');\n\nclass NlpManager {\n  constructor(settings = {}) {\n    this.settings = settings;\n    if (!this.settings.container) {\n      this.settings.container = containerBootstrap();\n    }\n    this.container = this.settings.container;\n    this.container.registerConfiguration('ner', {\n      entityPreffix: '%',\n      entitySuffix: '%',\n    });\n    this.container.register('fs', requestfs);\n    this.container.register('Language', Language, false);\n    this.container.use(LangAll);\n    this.container.use(Evaluator);\n    this.container.use(Template);\n    this.nlp = new Nlp(this.settings);\n    this.sentimentManager = new SentimentManager();\n    if (this.settings.ner) {\n      if (this.settings.ner.ducklingUrl || this.settings.ner.useDuckling) {\n        const builtin = new BuiltinDuckling(this.settings.ner);\n        this.container.register('extract-builtin-??', builtin, true);\n      } else {\n        const builtin = new BuiltinMicrosoft(this.settings.ner);\n        this.container.register('extract-builtin-??', builtin, true);\n      }\n    } else {\n      const builtin = new BuiltinMicrosoft(this.settings.ner);\n      this.container.register('extract-builtin-??', builtin, true);\n    }\n  }\n\n  addDocument(locale, utterance, intent) {\n    return this.nlp.addDocument(locale, utterance, intent);\n  }\n\n  removeDocument(locale, utterance, intent) {\n    return this.nlp.removeDocument(locale, utterance, intent);\n  }\n\n  addLanguage(locale) {\n    return this.nlp.addLanguage(locale);\n  }\n\n  removeLanguage(locale) {\n    return this.nlp.removeLanguage(locale);\n  }\n\n  assignDomain(locale, intent, domain) {\n    return this.nlp.assignDomain(locale, intent, domain);\n  }\n\n  getIntentDomain(locale, intent) {\n    return this.nlp.getIntentDomain(locale, intent);\n  }\n\n  getDomains() {\n    return this.nlp.getDomains();\n  }\n\n  guessLanguage(text) {\n    return this.nlp.guessLanguage(text);\n  }\n\n  addAction(intent, action, parameters, fn) {\n    if (!fn) {\n      fn = this.settings.action ? this.settings.action[action] : undefined;\n    }\n    return this.nlp.addAction(intent, action, parameters, fn);\n  }\n\n  getActions(intent) {\n    return this.nlp.getActions(intent);\n  }\n\n  removeAction(intent, action, parameters) {\n    return this.nlp.removeAction(intent, action, parameters);\n  }\n\n  removeActions(intent) {\n    return this.nlp.removeActions(intent);\n  }\n\n  addAnswer(locale, intent, answer, opts) {\n    return this.nlp.addAnswer(locale, intent, answer, opts);\n  }\n\n  removeAnswer(locale, intent, answer, opts) {\n    return this.nlp.removeAnswer(locale, intent, answer, opts);\n  }\n\n  findAllAnswers(locale, intent) {\n    return this.nlp.findAllAnswers(locale, intent);\n  }\n\n  async getSentiment(locale, utterance) {\n    const sentiment = await this.nlp.getSentiment(locale, utterance);\n    return this.sentimentManager.translate(sentiment.sentiment);\n  }\n\n  addNamedEntityText(entityName, optionName, languages, texts) {\n    return this.nlp.addNerRuleOptionTexts(\n      languages,\n      entityName,\n      optionName,\n      texts\n    );\n  }\n\n  removeNamedEntityText(entityName, optionName, languages, texts) {\n    return this.nlp.removeNerRuleOptionTexts(\n      languages,\n      entityName,\n      optionName,\n      texts\n    );\n  }\n\n  addRegexEntity(entityName, languages, regex) {\n    return this.nlp.addNerRegexRule(languages, entityName, regex);\n  }\n\n  addBetweenCondition(locale, name, left, right, opts) {\n    return this.nlp.addNerBetweenCondition(locale, name, left, right, opts);\n  }\n\n  addPositionCondition(locale, name, position, words, opts) {\n    return this.nlp.addNerPositionCondition(\n      locale,\n      name,\n      position,\n      words,\n      opts\n    );\n  }\n\n  addAfterCondition(locale, name, words, opts) {\n    return this.nlp.addNerAfterCondition(locale, name, words, opts);\n  }\n\n  addAfterFirstCondition(locale, name, words, opts) {\n    return this.nlp.addNerAfterFirstCondition(locale, name, words, opts);\n  }\n\n  addAfterLastCondition(locale, name, words, opts) {\n    return this.nlp.addNerAfterLastCondition(locale, name, words, opts);\n  }\n\n  addBeforeCondition(locale, name, words, opts) {\n    return this.nlp.addNerBeforeCondition(locale, name, words, opts);\n  }\n\n  addBeforeFirstCondition(locale, name, words, opts) {\n    return this.nlp.addNerBeforeFirstCondition(locale, name, words, opts);\n  }\n\n  addBeforeLastCondition(locale, name, words, opts) {\n    return this.nlp.addNerBeforeLastCondition(locale, name, words, opts);\n  }\n\n  describeLanguage(locale, name) {\n    return this.nlp.describeLanguage(locale, name);\n  }\n\n  beginEdit() {}\n\n  train() {\n    return this.nlp.train();\n  }\n\n  classify(locale, utterance, settings) {\n    return this.nlp.classify(locale, utterance, settings);\n  }\n\n  async process(locale, utterance, context, settings) {\n    const result = await this.nlp.process(locale, utterance, context, settings);\n    if (this.settings.processTransformer) {\n      return this.settings.processTransformer(result);\n    }\n    return result;\n  }\n\n  extractEntities(locale, utterance, context, settings) {\n    return this.nlp.extractEntities(locale, utterance, context, settings);\n  }\n\n  toObj() {\n    return this.nlp.toJSON();\n  }\n\n  fromObj(obj) {\n    return this.nlp.fromJSON(obj);\n  }\n\n  /**\n   * Export NLP manager information as a string.\n   * @param {Boolean} minified If true, the returned JSON will have no spacing or indentation.\n   * @returns {String} NLP manager information as a JSON string.\n   */\n  export(minified = false) {\n    const clone = this.toObj();\n    return minified ? JSON.stringify(clone) : JSON.stringify(clone, null, 2);\n  }\n\n  /**\n   * Load NLP manager information from a string.\n   * @param {String|Object} data JSON string or object to load NLP manager information from.\n   */\n  import(data) {\n    const clone = typeof data === 'string' ? JSON.parse(data) : data;\n    this.fromObj(clone);\n  }\n\n  /**\n   * Save the NLP manager information into a file.\n   * @param {String} srcFileName Filename for saving the NLP manager.\n   */\n  save(srcFileName, minified = false) {\n    const fileName = srcFileName || 'model.nlp';\n    fs.writeFileSync(fileName, this.export(minified), 'utf8');\n  }\n\n  /**\n   * Load the NLP manager information from a file.\n   * @param {String} srcFilename Filename for loading the NLP manager.\n   */\n  load(srcFileName) {\n    const fileName = srcFileName || 'model.nlp';\n    const data = fs.readFileSync(fileName, 'utf8');\n    this.import(data);\n  }\n\n  /**\n   * Load the NLP manager information from an excel file.\n   * @param {Sting} srcFileName File name of the excel.\n   */\n  loadExcel(fileName = 'model.xls') {\n    const reader = new NlpExcelReader(this);\n    reader.load(fileName);\n  }\n\n  async testCorpus(corpus) {\n    const { data } = corpus;\n    const result = {\n      total: 0,\n      good: 0,\n      bad: 0,\n    };\n    const promises = [];\n    const intents = [];\n    for (let i = 0; i < data.length; i += 1) {\n      const intentData = data[i];\n      const { tests } = intentData;\n      for (let j = 0; j < tests.length; j += 1) {\n        promises.push(this.process(corpus.locale.slice(0, 2), tests[j]));\n        intents.push(intentData.intent);\n      }\n    }\n    result.total += promises.length;\n    const results = await Promise.all(promises);\n    for (let i = 0; i < results.length; i += 1) {\n      const current = results[i];\n      if (current.intent === intents[i]) {\n        result.good += 1;\n      } else {\n        result.bad += 1;\n      }\n    }\n    return result;\n  }\n\n  addCorpora(corpora) {\n    this.nlp.addCorpora(corpora);\n  }\n\n  addCorpus(corpus) {\n    this.nlp.addCorpus(corpus);\n  }\n\n  async trainAndEvaluate(fileName) {\n    let corpus = fileName;\n    if (typeof fileName === 'string') {\n      const nlpfs = this.container.get('fs');\n      const fileData = await nlpfs.readFile(fileName);\n      if (!fileData) {\n        throw new Error(`Corpus not found \"${fileName}\"`);\n      }\n      corpus = typeof fileData === 'string' ? JSON.parse(fileData) : fileData;\n    }\n    this.nlp.addCorpus(corpus);\n    await this.train();\n    return this.testCorpus(corpus);\n  }\n}\n\nmodule.exports = NlpManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}