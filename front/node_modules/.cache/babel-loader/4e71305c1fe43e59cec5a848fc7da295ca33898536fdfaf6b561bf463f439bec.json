{"ast":null,"code":"const {\n  XDoc\n} = require('@nlpjs/xtables');\nclass NlpExcelReader {\n  constructor(manager) {\n    this.manager = manager;\n    this.xdoc = new XDoc();\n  }\n  load(filename) {\n    this.xdoc.read(filename);\n    this.loadSettings();\n    this.loadLanguages();\n    this.loadNamedEntities();\n    this.loadRegexEntities();\n    this.loadIntents();\n    this.loadResponses();\n  }\n  loadSettings() {}\n  loadLanguages() {\n    this.xdoc.getTable('Languages').data.forEach(row => {\n      this.manager.addLanguage(row.iso2);\n    });\n  }\n  loadNamedEntities() {\n    this.xdoc.getTable('Named Entities').data.forEach(row => {\n      const languages = row.language.split(',').map(x => x.trim());\n      this.manager.addNamedEntityText(row.entity, row.option, languages, row.text);\n    });\n  }\n  loadRegexEntities() {\n    const table = this.xdoc.getTable('Regex Entities');\n    if (table) {\n      table.data.forEach(row => {\n        const languages = row.language.split(',').map(x => x.trim());\n        this.manager.addRegexEntity(row.entity, languages, row.regex);\n      });\n    }\n  }\n  loadIntents() {\n    this.xdoc.getTable('Intents').data.forEach(row => {\n      this.manager.addDocument(row.language, row.utterance, row.intent);\n    });\n  }\n  loadResponses() {\n    this.xdoc.getTable('Responses').data.forEach(row => {\n      this.manager.addAnswer(row.language, row.intent, row.response, row.condition, row.url);\n    });\n  }\n}\nmodule.exports = NlpExcelReader;","map":{"version":3,"names":["XDoc","require","NlpExcelReader","constructor","manager","xdoc","load","filename","read","loadSettings","loadLanguages","loadNamedEntities","loadRegexEntities","loadIntents","loadResponses","getTable","data","forEach","row","addLanguage","iso2","languages","language","split","map","x","trim","addNamedEntityText","entity","option","text","table","addRegexEntity","regex","addDocument","utterance","intent","addAnswer","response","condition","url","module","exports"],"sources":["/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/node_modules/node-nlp/src/nlp/nlp-excel-reader.js"],"sourcesContent":["const { XDoc } = require('@nlpjs/xtables');\n\nclass NlpExcelReader {\n  constructor(manager) {\n    this.manager = manager;\n    this.xdoc = new XDoc();\n  }\n\n  load(filename) {\n    this.xdoc.read(filename);\n    this.loadSettings();\n    this.loadLanguages();\n    this.loadNamedEntities();\n    this.loadRegexEntities();\n    this.loadIntents();\n    this.loadResponses();\n  }\n\n  loadSettings() {}\n\n  loadLanguages() {\n    this.xdoc.getTable('Languages').data.forEach((row) => {\n      this.manager.addLanguage(row.iso2);\n    });\n  }\n\n  loadNamedEntities() {\n    this.xdoc.getTable('Named Entities').data.forEach((row) => {\n      const languages = row.language.split(',').map((x) => x.trim());\n      this.manager.addNamedEntityText(\n        row.entity,\n        row.option,\n        languages,\n        row.text\n      );\n    });\n  }\n\n  loadRegexEntities() {\n    const table = this.xdoc.getTable('Regex Entities');\n    if (table) {\n      table.data.forEach((row) => {\n        const languages = row.language.split(',').map((x) => x.trim());\n        this.manager.addRegexEntity(row.entity, languages, row.regex);\n      });\n    }\n  }\n\n  loadIntents() {\n    this.xdoc.getTable('Intents').data.forEach((row) => {\n      this.manager.addDocument(row.language, row.utterance, row.intent);\n    });\n  }\n\n  loadResponses() {\n    this.xdoc.getTable('Responses').data.forEach((row) => {\n      this.manager.addAnswer(\n        row.language,\n        row.intent,\n        row.response,\n        row.condition,\n        row.url\n      );\n    });\n  }\n}\n\nmodule.exports = NlpExcelReader;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAK,CAAC,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAE1C,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAG,IAAIL,IAAI,EAAE;EACxB;EAEAM,IAAIA,CAACC,QAAQ,EAAE;IACb,IAAI,CAACF,IAAI,CAACG,IAAI,CAACD,QAAQ,CAAC;IACxB,IAAI,CAACE,YAAY,EAAE;IACnB,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACC,iBAAiB,EAAE;IACxB,IAAI,CAACC,iBAAiB,EAAE;IACxB,IAAI,CAACC,WAAW,EAAE;IAClB,IAAI,CAACC,aAAa,EAAE;EACtB;EAEAL,YAAYA,CAAA,EAAG,CAAC;EAEhBC,aAAaA,CAAA,EAAG;IACd,IAAI,CAACL,IAAI,CAACU,QAAQ,CAAC,WAAW,CAAC,CAACC,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAK;MACpD,IAAI,CAACd,OAAO,CAACe,WAAW,CAACD,GAAG,CAACE,IAAI,CAAC;IACpC,CAAC,CAAC;EACJ;EAEAT,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACN,IAAI,CAACU,QAAQ,CAAC,gBAAgB,CAAC,CAACC,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAK;MACzD,MAAMG,SAAS,GAAGH,GAAG,CAACI,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,EAAE,CAAC;MAC9D,IAAI,CAACtB,OAAO,CAACuB,kBAAkB,CAC7BT,GAAG,CAACU,MAAM,EACVV,GAAG,CAACW,MAAM,EACVR,SAAS,EACTH,GAAG,CAACY,IAAI,CACT;IACH,CAAC,CAAC;EACJ;EAEAlB,iBAAiBA,CAAA,EAAG;IAClB,MAAMmB,KAAK,GAAG,IAAI,CAAC1B,IAAI,CAACU,QAAQ,CAAC,gBAAgB,CAAC;IAClD,IAAIgB,KAAK,EAAE;MACTA,KAAK,CAACf,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAK;QAC1B,MAAMG,SAAS,GAAGH,GAAG,CAACI,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,EAAE,CAAC;QAC9D,IAAI,CAACtB,OAAO,CAAC4B,cAAc,CAACd,GAAG,CAACU,MAAM,EAAEP,SAAS,EAAEH,GAAG,CAACe,KAAK,CAAC;MAC/D,CAAC,CAAC;IACJ;EACF;EAEApB,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACR,IAAI,CAACU,QAAQ,CAAC,SAAS,CAAC,CAACC,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAK;MAClD,IAAI,CAACd,OAAO,CAAC8B,WAAW,CAAChB,GAAG,CAACI,QAAQ,EAAEJ,GAAG,CAACiB,SAAS,EAAEjB,GAAG,CAACkB,MAAM,CAAC;IACnE,CAAC,CAAC;EACJ;EAEAtB,aAAaA,CAAA,EAAG;IACd,IAAI,CAACT,IAAI,CAACU,QAAQ,CAAC,WAAW,CAAC,CAACC,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAK;MACpD,IAAI,CAACd,OAAO,CAACiC,SAAS,CACpBnB,GAAG,CAACI,QAAQ,EACZJ,GAAG,CAACkB,MAAM,EACVlB,GAAG,CAACoB,QAAQ,EACZpB,GAAG,CAACqB,SAAS,EACbrB,GAAG,CAACsB,GAAG,CACR;IACH,CAAC,CAAC;EACJ;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGxC,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}