{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  defaultContainer\n} = require('./container');\nconst Clonable = require('./clonable');\nclass Context extends Clonable {\n  constructor() {\n    let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    super({\n      settings: {},\n      container: settings.container || container || defaultContainer\n    }, container);\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = 'context';\n    }\n    this.applySettings(this.settings, this.container.getConfiguration(this.settings.tag));\n  }\n  getStorage() {\n    const storage = this.container.get(this.settings.storageName || 'storage');\n    if (!storage) {\n      throw new Error('Storage not found');\n    }\n    return storage;\n  }\n  getContext(key) {\n    const storage = this.getStorage();\n    return storage.read(`${this.settings.tag}-${key}`);\n  }\n  setContext(key, value) {\n    const storage = this.getStorage();\n    const change = {\n      [key]: value\n    };\n    return storage.write(change);\n  }\n  async getContextValue(key, valueName) {\n    const context = await this.getContext(key);\n    return context ? context[valueName] : undefined;\n  }\n  async setContextValue(key, valueName, value) {\n    let context = await this.getContext(key);\n    if (!context) {\n      context = {};\n    }\n    context[valueName] = value;\n    return this.setContext(key, context);\n  }\n}\nmodule.exports = Context;","map":{"version":3,"names":["defaultContainer","require","Clonable","Context","constructor","settings","arguments","length","undefined","container","applySettings","tag","getConfiguration","getStorage","storage","get","storageName","Error","getContext","key","read","setContext","value","change","write","getContextValue","valueName","context","setContextValue","module","exports"],"sources":["/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/node_modules/@nlpjs/core/src/context.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { defaultContainer } = require('./container');\nconst Clonable = require('./clonable');\n\nclass Context extends Clonable {\n  constructor(settings = {}, container = undefined) {\n    super(\n      {\n        settings: {},\n        container: settings.container || container || defaultContainer,\n      },\n      container\n    );\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = 'context';\n    }\n    this.applySettings(\n      this.settings,\n      this.container.getConfiguration(this.settings.tag)\n    );\n  }\n\n  getStorage() {\n    const storage = this.container.get(this.settings.storageName || 'storage');\n    if (!storage) {\n      throw new Error('Storage not found');\n    }\n    return storage;\n  }\n\n  getContext(key) {\n    const storage = this.getStorage();\n    return storage.read(`${this.settings.tag}-${key}`);\n  }\n\n  setContext(key, value) {\n    const storage = this.getStorage();\n    const change = {\n      [key]: value,\n    };\n    return storage.write(change);\n  }\n\n  async getContextValue(key, valueName) {\n    const context = await this.getContext(key);\n    return context ? context[valueName] : undefined;\n  }\n\n  async setContextValue(key, valueName, value) {\n    let context = await this.getContext(key);\n    if (!context) {\n      context = {};\n    }\n    context[valueName] = value;\n    return this.setContext(key, context);\n  }\n}\n\nmodule.exports = Context;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAiB,CAAC,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnD,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AAEtC,MAAME,OAAO,SAASD,QAAQ,CAAC;EAC7BE,WAAWA,CAAA,EAAuC;IAAA,IAAtCC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEG,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGE,SAAS;IAC9C,KAAK,CACH;MACEH,QAAQ,EAAE,CAAC,CAAC;MACZI,SAAS,EAAEJ,QAAQ,CAACI,SAAS,IAAIA,SAAS,IAAIT;IAChD,CAAC,EACDS,SAAS,CACV;IACD,IAAI,CAACC,aAAa,CAAC,IAAI,CAACL,QAAQ,EAAEA,QAAQ,CAAC;IAC3C,IAAI,CAAC,IAAI,CAACA,QAAQ,CAACM,GAAG,EAAE;MACtB,IAAI,CAACN,QAAQ,CAACM,GAAG,GAAG,SAAS;IAC/B;IACA,IAAI,CAACD,aAAa,CAChB,IAAI,CAACL,QAAQ,EACb,IAAI,CAACI,SAAS,CAACG,gBAAgB,CAAC,IAAI,CAACP,QAAQ,CAACM,GAAG,CAAC,CACnD;EACH;EAEAE,UAAUA,CAAA,EAAG;IACX,MAAMC,OAAO,GAAG,IAAI,CAACL,SAAS,CAACM,GAAG,CAAC,IAAI,CAACV,QAAQ,CAACW,WAAW,IAAI,SAAS,CAAC;IAC1E,IAAI,CAACF,OAAO,EAAE;MACZ,MAAM,IAAIG,KAAK,CAAC,mBAAmB,CAAC;IACtC;IACA,OAAOH,OAAO;EAChB;EAEAI,UAAUA,CAACC,GAAG,EAAE;IACd,MAAML,OAAO,GAAG,IAAI,CAACD,UAAU,EAAE;IACjC,OAAOC,OAAO,CAACM,IAAI,CAAE,GAAE,IAAI,CAACf,QAAQ,CAACM,GAAI,IAAGQ,GAAI,EAAC,CAAC;EACpD;EAEAE,UAAUA,CAACF,GAAG,EAAEG,KAAK,EAAE;IACrB,MAAMR,OAAO,GAAG,IAAI,CAACD,UAAU,EAAE;IACjC,MAAMU,MAAM,GAAG;MACb,CAACJ,GAAG,GAAGG;IACT,CAAC;IACD,OAAOR,OAAO,CAACU,KAAK,CAACD,MAAM,CAAC;EAC9B;EAEA,MAAME,eAAeA,CAACN,GAAG,EAAEO,SAAS,EAAE;IACpC,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACT,UAAU,CAACC,GAAG,CAAC;IAC1C,OAAOQ,OAAO,GAAGA,OAAO,CAACD,SAAS,CAAC,GAAGlB,SAAS;EACjD;EAEA,MAAMoB,eAAeA,CAACT,GAAG,EAAEO,SAAS,EAAEJ,KAAK,EAAE;IAC3C,IAAIK,OAAO,GAAG,MAAM,IAAI,CAACT,UAAU,CAACC,GAAG,CAAC;IACxC,IAAI,CAACQ,OAAO,EAAE;MACZA,OAAO,GAAG,CAAC,CAAC;IACd;IACAA,OAAO,CAACD,SAAS,CAAC,GAAGJ,KAAK;IAC1B,OAAO,IAAI,CAACD,UAAU,CAACF,GAAG,EAAEQ,OAAO,CAAC;EACtC;AACF;AAEAE,MAAM,CAACC,OAAO,GAAG3B,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}