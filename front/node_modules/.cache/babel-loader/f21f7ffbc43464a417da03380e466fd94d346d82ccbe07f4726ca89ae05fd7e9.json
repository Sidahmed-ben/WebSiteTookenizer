{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  defaultContainer\n} = require('./container');\nconst Clonable = require('./clonable');\nclass MemoryStorage extends Clonable {\n  constructor() {\n    let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    super({\n      settings: {},\n      container: settings.container || container || defaultContainer\n    }, container);\n    this.applySettings(this.settings, settings);\n    this.applySettings(this.settings, {\n      etag: 1,\n      memory: {}\n    });\n    if (!this.settings.tag) {\n      this.settings.tag = 'storage';\n    }\n    this.applySettings(this.settings, this.container.getConfiguration(this.settings.tag));\n  }\n  read(keys) {\n    return new Promise(resolve => {\n      const data = {};\n      if (!Array.isArray(keys)) {\n        keys = [keys];\n      }\n      keys.forEach(key => {\n        const item = this.settings.memory[key];\n        if (item) {\n          data[key] = JSON.parse(item);\n        }\n      });\n      resolve(data);\n    });\n  }\n  saveItem(key, item) {\n    const clone = {\n      ...item\n    };\n    clone.eTag = this.settings.etag.toString();\n    this.settings.etag += 1;\n    this.settings.memory[key] = JSON.stringify(clone);\n    return clone;\n  }\n  write(changes) {\n    return new Promise((resolve, reject) => {\n      Object.keys(changes).forEach(key => {\n        const newItem = changes[key];\n        const oldStr = this.settings.memory[key];\n        if (!oldStr || newItem.eTag === '*') {\n          return resolve(this.saveItem(key, newItem));\n        }\n        const oldItem = JSON.parse(oldStr);\n        if (newItem.eTag !== oldItem.eTag) {\n          return reject(new Error(`Error writing \"${key}\" due to eTag conflict.`));\n        }\n        return resolve(this.saveItem(key, newItem));\n      });\n    });\n  }\n  delete(keys) {\n    return new Promise(resolve => {\n      keys.forEach(key => delete this.settings.memory[key]);\n      resolve();\n    });\n  }\n}\nmodule.exports = MemoryStorage;","map":{"version":3,"names":["defaultContainer","require","Clonable","MemoryStorage","constructor","settings","arguments","length","undefined","container","applySettings","etag","memory","tag","getConfiguration","read","keys","Promise","resolve","data","Array","isArray","forEach","key","item","JSON","parse","saveItem","clone","eTag","toString","stringify","write","changes","reject","Object","newItem","oldStr","oldItem","Error","delete","module","exports"],"sources":["/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/node_modules/@nlpjs/core/src/memory-storage.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { defaultContainer } = require('./container');\nconst Clonable = require('./clonable');\n\nclass MemoryStorage extends Clonable {\n  constructor(settings = {}, container = undefined) {\n    super(\n      {\n        settings: {},\n        container: settings.container || container || defaultContainer,\n      },\n      container\n    );\n    this.applySettings(this.settings, settings);\n    this.applySettings(this.settings, { etag: 1, memory: {} });\n    if (!this.settings.tag) {\n      this.settings.tag = 'storage';\n    }\n    this.applySettings(\n      this.settings,\n      this.container.getConfiguration(this.settings.tag)\n    );\n  }\n\n  read(keys) {\n    return new Promise((resolve) => {\n      const data = {};\n      if (!Array.isArray(keys)) {\n        keys = [keys];\n      }\n      keys.forEach((key) => {\n        const item = this.settings.memory[key];\n        if (item) {\n          data[key] = JSON.parse(item);\n        }\n      });\n      resolve(data);\n    });\n  }\n\n  saveItem(key, item) {\n    const clone = { ...item };\n    clone.eTag = this.settings.etag.toString();\n    this.settings.etag += 1;\n    this.settings.memory[key] = JSON.stringify(clone);\n    return clone;\n  }\n\n  write(changes) {\n    return new Promise((resolve, reject) => {\n      Object.keys(changes).forEach((key) => {\n        const newItem = changes[key];\n        const oldStr = this.settings.memory[key];\n        if (!oldStr || newItem.eTag === '*') {\n          return resolve(this.saveItem(key, newItem));\n        }\n        const oldItem = JSON.parse(oldStr);\n        if (newItem.eTag !== oldItem.eTag) {\n          return reject(\n            new Error(`Error writing \"${key}\" due to eTag conflict.`)\n          );\n        }\n        return resolve(this.saveItem(key, newItem));\n      });\n    });\n  }\n\n  delete(keys) {\n    return new Promise((resolve) => {\n      keys.forEach((key) => delete this.settings.memory[key]);\n      resolve();\n    });\n  }\n}\n\nmodule.exports = MemoryStorage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}