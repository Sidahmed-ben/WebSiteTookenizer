{"ast":null,"code":"var _jsxFileName = \"/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/src/components/Parser.js\";\nimport { stopWords, text } from \"./stopWords.js\";\n\n// const { NlpManager } = require(\"node-nlp\");\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst natural = require(\"natural\");\nconst winkPosTagger = require(\"wink-pos-tagger\");\nconst franc = require(\"franc\");\nconst tokenizer = new natural.WordTokenizer();\nconst stemmer = natural.PorterStemmerFr;\nconst Parser = () => {\n  const text = \"je suis sidahmed\";\n  function countWords(text) {\n    const tagger = new winkPosTagger({\n      language: \"french\"\n    });\n    const results = {};\n    const tokens = tokenizer.tokenize(text);\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      const language = franc.franc(\"votre mot ici\");\n      if (language === \"fra\") {\n        const natural = require(\"natural\");\n        const tagger = new natural.BrillPOSTagger(new natural.Lexicon(\"french\"), new natural.BrillPOSTaggerTrainer(\"french\"));\n        const taggedWords = tagger.tag([\"je\", \"suis\", \"sidahmed\"]);\n        const isVerb = taggedWords.some(word => word[1].startsWith(\"V\"));\n        console.log(isVerb);\n      } else {\n        console.log(\"Le mot n'est pas en français.\");\n      }\n      const stem = stemmer.stem(token.toLowerCase());\n      if (!stopWords.includes(stem)) {\n        results[stem] = (results[stem] || 0) + 1;\n      }\n    }\n    return results;\n  }\n\n  // const text = \"Le chat et le chien sont amis, mais le chat préfère le tapis\";\n  const wordCounts = countWords(text);\n  //   console.log(wordCounts);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), \"Paragraphe :\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_c = Parser;\nexport default Parser;\nvar _c;\n$RefreshReg$(_c, \"Parser\");","map":{"version":3,"names":["stopWords","text","jsxDEV","_jsxDEV","natural","require","winkPosTagger","franc","tokenizer","WordTokenizer","stemmer","PorterStemmerFr","Parser","countWords","tagger","language","results","tokens","tokenize","i","length","token","BrillPOSTagger","Lexicon","BrillPOSTaggerTrainer","taggedWords","tag","isVerb","some","word","startsWith","console","log","stem","toLowerCase","includes","wordCounts","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/src/components/Parser.js"],"sourcesContent":["import { stopWords, text } from \"./stopWords.js\";\n\n// const { NlpManager } = require(\"node-nlp\");\nconst natural = require(\"natural\");\nconst winkPosTagger = require(\"wink-pos-tagger\");\nconst franc = require(\"franc\");\n\nconst tokenizer = new natural.WordTokenizer();\nconst stemmer = natural.PorterStemmerFr;\n\nconst Parser = () => {\n  const text = \"je suis sidahmed\";\n\n  function countWords(text) {\n    const tagger = new winkPosTagger({ language: \"french\" });\n\n    const results = {};\n    const tokens = tokenizer.tokenize(text);\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      const language = franc.franc(\"votre mot ici\");\n\n      if (language === \"fra\") {\n        const natural = require(\"natural\");\n        const tagger = new natural.BrillPOSTagger(\n          new natural.Lexicon(\"french\"),\n          new natural.BrillPOSTaggerTrainer(\"french\")\n        );\n        const taggedWords = tagger.tag([\"je\", \"suis\", \"sidahmed\"]);\n        const isVerb = taggedWords.some((word) => word[1].startsWith(\"V\"));\n        console.log(isVerb);\n      } else {\n        console.log(\"Le mot n'est pas en français.\");\n      }\n\n      const stem = stemmer.stem(token.toLowerCase());\n      if (!stopWords.includes(stem)) {\n        results[stem] = (results[stem] || 0) + 1;\n      }\n    }\n    return results;\n  }\n\n  // const text = \"Le chat et le chien sont amis, mais le chat préfère le tapis\";\n  const wordCounts = countWords(text);\n  //   console.log(wordCounts);\n\n  return (\n    <div>\n      <h2>\n        <br></br>\n        Paragraphe :<br></br>\n        <br></br>\n        {text}\n      </h2>\n    </div>\n  );\n};\n\nexport default Parser;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}