{"ast":null,"code":"var _jsxFileName = \"/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/src/components/Parser.js\";\nimport { stopWords } from \"./stopWords.js\";\n\n// const { NlpManager } = require(\"node-nlp\");\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst natural = require(\"natural\");\nconst franc = require(\"franc\");\nconst tokenizer = new natural.WordTokenizer();\nconst stemmer = natural.PorterStemmerFr;\nconst Parser = () => {\n  const text = \"how are you\";\n  function countWords(text) {\n    //   const tagger = new winkPosTagger({ language: \"french\" });\n    const language = franc(\"votre mot ici\");\n    const results = {};\n    const tokens = tokenizer.tokenize(text);\n    // console.log(tokens);\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      const taggedWords = tagger.tagSentence(token);\n      const isVerb = taggedWords[0].pos.startsWith(\"V\");\n      if (isVerb) {\n        console.log(\"Verbe => \", token);\n      }\n      const stem = stemmer.stem(token.toLowerCase());\n      if (!stopWords.includes(stem)) {\n        results[stem] = (results[stem] || 0) + 1;\n      }\n    }\n    return results;\n  }\n\n  // const text = \"Le chat et le chien sont amis, mais le chat préfère le tapis\";\n  const wordCounts = countWords(text);\n  //   console.log(wordCounts);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), \"Paragraphe :\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_c = Parser;\nexport default Parser;\nvar _c;\n$RefreshReg$(_c, \"Parser\");","map":{"version":3,"names":["stopWords","jsxDEV","_jsxDEV","natural","require","franc","tokenizer","WordTokenizer","stemmer","PorterStemmerFr","Parser","text","countWords","language","results","tokens","tokenize","i","length","token","taggedWords","tagger","tagSentence","isVerb","pos","startsWith","console","log","stem","toLowerCase","includes","wordCounts","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/src/components/Parser.js"],"sourcesContent":["import { stopWords } from \"./stopWords.js\";\n\n// const { NlpManager } = require(\"node-nlp\");\nconst natural = require(\"natural\");\nconst franc = require(\"franc\");\n\nconst tokenizer = new natural.WordTokenizer();\nconst stemmer = natural.PorterStemmerFr;\n\nconst Parser = () => {\n  const text = \"how are you\";\n\n  function countWords(text) {\n    //   const tagger = new winkPosTagger({ language: \"french\" });\n    const language = franc(\"votre mot ici\");\n\n    const results = {};\n    const tokens = tokenizer.tokenize(text);\n    // console.log(tokens);\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      const taggedWords = tagger.tagSentence(token);\n      const isVerb = taggedWords[0].pos.startsWith(\"V\");\n      if (isVerb) {\n        console.log(\"Verbe => \", token);\n      }\n      const stem = stemmer.stem(token.toLowerCase());\n      if (!stopWords.includes(stem)) {\n        results[stem] = (results[stem] || 0) + 1;\n      }\n    }\n    return results;\n  }\n\n  // const text = \"Le chat et le chien sont amis, mais le chat préfère le tapis\";\n  const wordCounts = countWords(text);\n  //   console.log(wordCounts);\n\n  return (\n    <div>\n      <h2>\n        <br></br>\n        Paragraphe :<br></br>\n        <br></br>\n        {text}\n      </h2>\n    </div>\n  );\n};\n\nexport default Parser;\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,gBAAgB;;AAE1C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAME,SAAS,GAAG,IAAIH,OAAO,CAACI,aAAa,EAAE;AAC7C,MAAMC,OAAO,GAAGL,OAAO,CAACM,eAAe;AAEvC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB,MAAMC,IAAI,GAAG,aAAa;EAE1B,SAASC,UAAUA,CAACD,IAAI,EAAE;IACxB;IACA,MAAME,QAAQ,GAAGR,KAAK,CAAC,eAAe,CAAC;IAEvC,MAAMS,OAAO,GAAG,CAAC,CAAC;IAClB,MAAMC,MAAM,GAAGT,SAAS,CAACU,QAAQ,CAACL,IAAI,CAAC;IACvC;;IAEA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,MAAME,KAAK,GAAGJ,MAAM,CAACE,CAAC,CAAC;MACvB,MAAMG,WAAW,GAAGC,MAAM,CAACC,WAAW,CAACH,KAAK,CAAC;MAC7C,MAAMI,MAAM,GAAGH,WAAW,CAAC,CAAC,CAAC,CAACI,GAAG,CAACC,UAAU,CAAC,GAAG,CAAC;MACjD,IAAIF,MAAM,EAAE;QACVG,OAAO,CAACC,GAAG,CAAC,WAAW,EAAER,KAAK,CAAC;MACjC;MACA,MAAMS,IAAI,GAAGpB,OAAO,CAACoB,IAAI,CAACT,KAAK,CAACU,WAAW,EAAE,CAAC;MAC9C,IAAI,CAAC7B,SAAS,CAAC8B,QAAQ,CAACF,IAAI,CAAC,EAAE;QAC7Bd,OAAO,CAACc,IAAI,CAAC,GAAG,CAACd,OAAO,CAACc,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MAC1C;IACF;IACA,OAAOd,OAAO;EAChB;;EAEA;EACA,MAAMiB,UAAU,GAAGnB,UAAU,CAACD,IAAI,CAAC;EACnC;;EAEA,oBACET,OAAA;IAAA8B,QAAA,eACE9B,OAAA;MAAA8B,QAAA,gBACE9B,OAAA;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,gBACG,eAAAlC,OAAA;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eACrBlC,OAAA;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,EACRzB,IAAI;IAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEV,CAAC;AAACC,EAAA,GAxCI3B,MAAM;AA0CZ,eAAeA,MAAM;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}