{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  Clonable\n} = require('@nlpjs/core');\nconst dataName = '_data';\nclass ContextManager extends Clonable {\n  constructor() {\n    let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let container = arguments.length > 1 ? arguments[1] : undefined;\n    super({\n      settings: {},\n      container: settings.container || container\n    }, container);\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = `context-manager`;\n    }\n    this.registerDefault();\n    this.applySettings(this.settings, this.container.getConfiguration(this.settings.tag));\n    this.contextDictionary = {};\n    this.defaultData = {};\n  }\n  registerDefault() {\n    this.container.registerConfiguration('context-manager', {\n      tableName: 'context'\n    });\n  }\n  async getInputContextId(input) {\n    let result;\n    if (this.onGetInputContextId) {\n      result = await this.onGetInputContextId(input);\n    }\n    if (!result && input && input.activity) {\n      if (input.activity.address && input.activity.address.conversation) {\n        result = input.activity.address.conversation.id;\n      } else if (input.activity.conversation) {\n        result = input.activity.conversation.id;\n      }\n    }\n    return result;\n  }\n  async getContext(input) {\n    const id = await this.getInputContextId(input);\n    let result;\n    if (id) {\n      if (this.settings.tableName) {\n        const database = this.container ? this.container.get('database') : undefined;\n        if (database) {\n          result = (await database.findOne(this.settings.tableName, {\n            conversationId: id\n          })) || {\n            conversationId: id\n          };\n        }\n      }\n      if (!result) {\n        result = this.contextDictionary[id] || {\n          conversationId: id\n        };\n      }\n    } else {\n      result = {};\n    }\n    result[dataName] = this.defaultData;\n    return result;\n  }\n  async setContext(input, context) {\n    const logger = this.container.get('logger');\n    const id = await this.getInputContextId(input);\n    if (id) {\n      if (!context.id) {\n        const savedContext = await this.getContext(input);\n        if (savedContext) {\n          context.id = savedContext.id;\n        }\n      }\n      const keys = Object.keys(context);\n      const clone = {\n        conversationId: id\n      };\n      for (let i = 0; i < keys.length; i += 1) {\n        const key = keys[i];\n        if (!key.startsWith('_')) {\n          clone[key] = context[key];\n        }\n      }\n      if (this.settings.tableName) {\n        const database = this.container ? this.container.get('database') : undefined;\n        if (database) {\n          await database.save(this.settings.tableName, clone);\n        } else {\n          this.contextDictionary[id] = clone;\n        }\n      } else {\n        this.contextDictionary[id] = clone;\n      }\n      if (this.onCtxUpdate) {\n        logger.debug(`emmitting event onCtxUpdate...`);\n        await this.onCtxUpdate(clone);\n      }\n    }\n  }\n  async resetConversations() {\n    for (const cid of Object.keys(this.contextDictionary)) {\n      await this.resetConversation(cid);\n    }\n  }\n  async resetConversation(cid) {\n    const logger = this.container.get('logger');\n    logger.debug(`resetting context in conversation: ${cid}`);\n    const conversationCtx = this.contextDictionary[cid];\n    Object.keys(conversationCtx).forEach(convCtxKey => {\n      delete conversationCtx[convCtxKey];\n    });\n    this.contextDictionary[cid].dialogStack = [];\n    this.contextDictionary[cid].variableName = undefined;\n  }\n}\nmodule.exports = ContextManager;","map":{"version":3,"names":["Clonable","require","dataName","ContextManager","constructor","settings","arguments","length","undefined","container","applySettings","tag","registerDefault","getConfiguration","contextDictionary","defaultData","registerConfiguration","tableName","getInputContextId","input","result","onGetInputContextId","activity","address","conversation","id","getContext","database","get","findOne","conversationId","setContext","context","logger","savedContext","keys","Object","clone","i","key","startsWith","save","onCtxUpdate","debug","resetConversations","cid","resetConversation","conversationCtx","forEach","convCtxKey","dialogStack","variableName","module","exports"],"sources":["/home/sidahmed/Bureau/Cours_Master_1/S2/Web/Partie2/MoteurRecherche/moteur-rech/node_modules/@nlpjs/nlp/src/context-manager.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { Clonable } = require('@nlpjs/core');\n\nconst dataName = '_data';\n\nclass ContextManager extends Clonable {\n  constructor(settings = {}, container) {\n    super(\n      { settings: {}, container: settings.container || container },\n      container\n    );\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = `context-manager`;\n    }\n    this.registerDefault();\n    this.applySettings(\n      this.settings,\n      this.container.getConfiguration(this.settings.tag)\n    );\n    this.contextDictionary = {};\n    this.defaultData = {};\n  }\n\n  registerDefault() {\n    this.container.registerConfiguration('context-manager', {\n      tableName: 'context',\n    });\n  }\n\n  async getInputContextId(input) {\n    let result;\n    if (this.onGetInputContextId) {\n      result = await this.onGetInputContextId(input);\n    }\n    if (!result && input && input.activity) {\n      if (input.activity.address && input.activity.address.conversation) {\n        result = input.activity.address.conversation.id;\n      } else if (input.activity.conversation) {\n        result = input.activity.conversation.id;\n      }\n    }\n    return result;\n  }\n\n  async getContext(input) {\n    const id = await this.getInputContextId(input);\n    let result;\n    if (id) {\n      if (this.settings.tableName) {\n        const database = this.container\n          ? this.container.get('database')\n          : undefined;\n        if (database) {\n          result = (await database.findOne(this.settings.tableName, {\n            conversationId: id,\n          })) || { conversationId: id };\n        }\n      }\n      if (!result) {\n        result = this.contextDictionary[id] || { conversationId: id };\n      }\n    } else {\n      result = {};\n    }\n    result[dataName] = this.defaultData;\n    return result;\n  }\n\n  async setContext(input, context) {\n    const logger = this.container.get('logger');\n    const id = await this.getInputContextId(input);\n    if (id) {\n      if (!context.id) {\n        const savedContext = await this.getContext(input);\n        if (savedContext) {\n          context.id = savedContext.id;\n        }\n      }\n      const keys = Object.keys(context);\n      const clone = { conversationId: id };\n      for (let i = 0; i < keys.length; i += 1) {\n        const key = keys[i];\n        if (!key.startsWith('_')) {\n          clone[key] = context[key];\n        }\n      }\n      if (this.settings.tableName) {\n        const database = this.container\n          ? this.container.get('database')\n          : undefined;\n        if (database) {\n          await database.save(this.settings.tableName, clone);\n        } else {\n          this.contextDictionary[id] = clone;\n        }\n      } else {\n        this.contextDictionary[id] = clone;\n      }\n      if (this.onCtxUpdate) {\n        logger.debug(`emmitting event onCtxUpdate...`);\n        await this.onCtxUpdate(clone);\n      }\n    }\n  }\n\n  async resetConversations() {\n    for (const cid of Object.keys(this.contextDictionary)) {\n      await this.resetConversation(cid);\n    }\n  }\n\n  async resetConversation(cid) {\n    const logger = this.container.get('logger');\n    logger.debug(`resetting context in conversation: ${cid}`);\n    const conversationCtx = this.contextDictionary[cid];\n    Object.keys(conversationCtx).forEach((convCtxKey) => {\n      delete conversationCtx[convCtxKey];\n    });\n    this.contextDictionary[cid].dialogStack = [];\n    this.contextDictionary[cid].variableName = undefined;\n  }\n}\n\nmodule.exports = ContextManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}